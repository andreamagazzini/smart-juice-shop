// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      String    @default("customer")
  isAdmin   Boolean   @default(false)
  totpSecret String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  baskets    Basket[]
  orders     Order[]
  completedChallenges CompletedChallenge[]
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float
  image       String?
  deletedAt   DateTime?
  
  reviews     Review[]
  basketItems BasketItem[]
}

model Basket {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  User   User         @relation(fields: [userId], references: [id])
  items  BasketItem[]
}

model BasketItem {
  id        Int    @id @default(autoincrement())
  basketId  Int
  productId Int
  quantity  Int    @default(1)
  
  Basket Basket  @relation(fields: [basketId], references: [id])
  Product Product @relation(fields: [productId], references: [id])
  
  @@unique([basketId, productId])
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  totalPrice Float
  createdAt DateTime @default(now())
  
  User      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int    @id @default(autoincrement())
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  
  Product Product @relation(fields: [productId], references: [id])
}

model Challenge {
  id          Int     @id @default(autoincrement())
  key         String  @unique
  name        String
  category    String
  difficulty  Int
  description String
  solved      Boolean @default(false)
  hints       String?
  
  completedBy CompletedChallenge[]
}

model CompletedChallenge {
  id         Int      @id @default(autoincrement())
  userId     Int
  challengeId Int
  completedAt DateTime @default(now())
  
  User      User      @relation(fields: [userId], references: [id])
  Challenge Challenge @relation(fields: [challengeId], references: [id])
  
  @@unique([userId, challengeId])
}
