
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Challenge` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Challenge
 * 
 */
export type ChallengeModel = runtime.Types.Result.DefaultSelection<Prisma.$ChallengePayload>

export type AggregateChallenge = {
  _count: ChallengeCountAggregateOutputType | null
  _avg: ChallengeAvgAggregateOutputType | null
  _sum: ChallengeSumAggregateOutputType | null
  _min: ChallengeMinAggregateOutputType | null
  _max: ChallengeMaxAggregateOutputType | null
}

export type ChallengeAvgAggregateOutputType = {
  id: number | null
  difficulty: number | null
}

export type ChallengeSumAggregateOutputType = {
  id: number | null
  difficulty: number | null
}

export type ChallengeMinAggregateOutputType = {
  id: number | null
  key: string | null
  name: string | null
  category: string | null
  difficulty: number | null
  description: string | null
  solved: boolean | null
  hints: string | null
}

export type ChallengeMaxAggregateOutputType = {
  id: number | null
  key: string | null
  name: string | null
  category: string | null
  difficulty: number | null
  description: string | null
  solved: boolean | null
  hints: string | null
}

export type ChallengeCountAggregateOutputType = {
  id: number
  key: number
  name: number
  category: number
  difficulty: number
  description: number
  solved: number
  hints: number
  _all: number
}


export type ChallengeAvgAggregateInputType = {
  id?: true
  difficulty?: true
}

export type ChallengeSumAggregateInputType = {
  id?: true
  difficulty?: true
}

export type ChallengeMinAggregateInputType = {
  id?: true
  key?: true
  name?: true
  category?: true
  difficulty?: true
  description?: true
  solved?: true
  hints?: true
}

export type ChallengeMaxAggregateInputType = {
  id?: true
  key?: true
  name?: true
  category?: true
  difficulty?: true
  description?: true
  solved?: true
  hints?: true
}

export type ChallengeCountAggregateInputType = {
  id?: true
  key?: true
  name?: true
  category?: true
  difficulty?: true
  description?: true
  solved?: true
  hints?: true
  _all?: true
}

export type ChallengeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Challenge to aggregate.
   */
  where?: Prisma.ChallengeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Challenges to fetch.
   */
  orderBy?: Prisma.ChallengeOrderByWithRelationInput | Prisma.ChallengeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChallengeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Challenges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Challenges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Challenges
  **/
  _count?: true | ChallengeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChallengeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChallengeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChallengeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChallengeMaxAggregateInputType
}

export type GetChallengeAggregateType<T extends ChallengeAggregateArgs> = {
      [P in keyof T & keyof AggregateChallenge]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChallenge[P]>
    : Prisma.GetScalarType<T[P], AggregateChallenge[P]>
}




export type ChallengeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChallengeWhereInput
  orderBy?: Prisma.ChallengeOrderByWithAggregationInput | Prisma.ChallengeOrderByWithAggregationInput[]
  by: Prisma.ChallengeScalarFieldEnum[] | Prisma.ChallengeScalarFieldEnum
  having?: Prisma.ChallengeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChallengeCountAggregateInputType | true
  _avg?: ChallengeAvgAggregateInputType
  _sum?: ChallengeSumAggregateInputType
  _min?: ChallengeMinAggregateInputType
  _max?: ChallengeMaxAggregateInputType
}

export type ChallengeGroupByOutputType = {
  id: number
  key: string
  name: string
  category: string
  difficulty: number
  description: string
  solved: boolean
  hints: string | null
  _count: ChallengeCountAggregateOutputType | null
  _avg: ChallengeAvgAggregateOutputType | null
  _sum: ChallengeSumAggregateOutputType | null
  _min: ChallengeMinAggregateOutputType | null
  _max: ChallengeMaxAggregateOutputType | null
}

type GetChallengeGroupByPayload<T extends ChallengeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChallengeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChallengeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChallengeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChallengeGroupByOutputType[P]>
      }
    >
  >



export type ChallengeWhereInput = {
  AND?: Prisma.ChallengeWhereInput | Prisma.ChallengeWhereInput[]
  OR?: Prisma.ChallengeWhereInput[]
  NOT?: Prisma.ChallengeWhereInput | Prisma.ChallengeWhereInput[]
  id?: Prisma.IntFilter<"Challenge"> | number
  key?: Prisma.StringFilter<"Challenge"> | string
  name?: Prisma.StringFilter<"Challenge"> | string
  category?: Prisma.StringFilter<"Challenge"> | string
  difficulty?: Prisma.IntFilter<"Challenge"> | number
  description?: Prisma.StringFilter<"Challenge"> | string
  solved?: Prisma.BoolFilter<"Challenge"> | boolean
  hints?: Prisma.StringNullableFilter<"Challenge"> | string | null
  completedBy?: Prisma.CompletedChallengeListRelationFilter
}

export type ChallengeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  description?: Prisma.SortOrder
  solved?: Prisma.SortOrder
  hints?: Prisma.SortOrderInput | Prisma.SortOrder
  completedBy?: Prisma.CompletedChallengeOrderByRelationAggregateInput
}

export type ChallengeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  key?: string
  AND?: Prisma.ChallengeWhereInput | Prisma.ChallengeWhereInput[]
  OR?: Prisma.ChallengeWhereInput[]
  NOT?: Prisma.ChallengeWhereInput | Prisma.ChallengeWhereInput[]
  name?: Prisma.StringFilter<"Challenge"> | string
  category?: Prisma.StringFilter<"Challenge"> | string
  difficulty?: Prisma.IntFilter<"Challenge"> | number
  description?: Prisma.StringFilter<"Challenge"> | string
  solved?: Prisma.BoolFilter<"Challenge"> | boolean
  hints?: Prisma.StringNullableFilter<"Challenge"> | string | null
  completedBy?: Prisma.CompletedChallengeListRelationFilter
}, "id" | "key">

export type ChallengeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  description?: Prisma.SortOrder
  solved?: Prisma.SortOrder
  hints?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ChallengeCountOrderByAggregateInput
  _avg?: Prisma.ChallengeAvgOrderByAggregateInput
  _max?: Prisma.ChallengeMaxOrderByAggregateInput
  _min?: Prisma.ChallengeMinOrderByAggregateInput
  _sum?: Prisma.ChallengeSumOrderByAggregateInput
}

export type ChallengeScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChallengeScalarWhereWithAggregatesInput | Prisma.ChallengeScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChallengeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChallengeScalarWhereWithAggregatesInput | Prisma.ChallengeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Challenge"> | number
  key?: Prisma.StringWithAggregatesFilter<"Challenge"> | string
  name?: Prisma.StringWithAggregatesFilter<"Challenge"> | string
  category?: Prisma.StringWithAggregatesFilter<"Challenge"> | string
  difficulty?: Prisma.IntWithAggregatesFilter<"Challenge"> | number
  description?: Prisma.StringWithAggregatesFilter<"Challenge"> | string
  solved?: Prisma.BoolWithAggregatesFilter<"Challenge"> | boolean
  hints?: Prisma.StringNullableWithAggregatesFilter<"Challenge"> | string | null
}

export type ChallengeCreateInput = {
  key: string
  name: string
  category: string
  difficulty: number
  description: string
  solved?: boolean
  hints?: string | null
  completedBy?: Prisma.CompletedChallengeCreateNestedManyWithoutChallengeInput
}

export type ChallengeUncheckedCreateInput = {
  id?: number
  key: string
  name: string
  category: string
  difficulty: number
  description: string
  solved?: boolean
  hints?: string | null
  completedBy?: Prisma.CompletedChallengeUncheckedCreateNestedManyWithoutChallengeInput
}

export type ChallengeUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  solved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hints?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  completedBy?: Prisma.CompletedChallengeUpdateManyWithoutChallengeNestedInput
}

export type ChallengeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  solved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hints?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  completedBy?: Prisma.CompletedChallengeUncheckedUpdateManyWithoutChallengeNestedInput
}

export type ChallengeCreateManyInput = {
  id?: number
  key: string
  name: string
  category: string
  difficulty: number
  description: string
  solved?: boolean
  hints?: string | null
}

export type ChallengeUpdateManyMutationInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  solved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hints?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ChallengeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  solved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hints?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ChallengeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  description?: Prisma.SortOrder
  solved?: Prisma.SortOrder
  hints?: Prisma.SortOrder
}

export type ChallengeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
}

export type ChallengeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  description?: Prisma.SortOrder
  solved?: Prisma.SortOrder
  hints?: Prisma.SortOrder
}

export type ChallengeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  description?: Prisma.SortOrder
  solved?: Prisma.SortOrder
  hints?: Prisma.SortOrder
}

export type ChallengeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
}

export type ChallengeScalarRelationFilter = {
  is?: Prisma.ChallengeWhereInput
  isNot?: Prisma.ChallengeWhereInput
}

export type ChallengeCreateNestedOneWithoutCompletedByInput = {
  create?: Prisma.XOR<Prisma.ChallengeCreateWithoutCompletedByInput, Prisma.ChallengeUncheckedCreateWithoutCompletedByInput>
  connectOrCreate?: Prisma.ChallengeCreateOrConnectWithoutCompletedByInput
  connect?: Prisma.ChallengeWhereUniqueInput
}

export type ChallengeUpdateOneRequiredWithoutCompletedByNestedInput = {
  create?: Prisma.XOR<Prisma.ChallengeCreateWithoutCompletedByInput, Prisma.ChallengeUncheckedCreateWithoutCompletedByInput>
  connectOrCreate?: Prisma.ChallengeCreateOrConnectWithoutCompletedByInput
  upsert?: Prisma.ChallengeUpsertWithoutCompletedByInput
  connect?: Prisma.ChallengeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChallengeUpdateToOneWithWhereWithoutCompletedByInput, Prisma.ChallengeUpdateWithoutCompletedByInput>, Prisma.ChallengeUncheckedUpdateWithoutCompletedByInput>
}

export type ChallengeCreateWithoutCompletedByInput = {
  key: string
  name: string
  category: string
  difficulty: number
  description: string
  solved?: boolean
  hints?: string | null
}

export type ChallengeUncheckedCreateWithoutCompletedByInput = {
  id?: number
  key: string
  name: string
  category: string
  difficulty: number
  description: string
  solved?: boolean
  hints?: string | null
}

export type ChallengeCreateOrConnectWithoutCompletedByInput = {
  where: Prisma.ChallengeWhereUniqueInput
  create: Prisma.XOR<Prisma.ChallengeCreateWithoutCompletedByInput, Prisma.ChallengeUncheckedCreateWithoutCompletedByInput>
}

export type ChallengeUpsertWithoutCompletedByInput = {
  update: Prisma.XOR<Prisma.ChallengeUpdateWithoutCompletedByInput, Prisma.ChallengeUncheckedUpdateWithoutCompletedByInput>
  create: Prisma.XOR<Prisma.ChallengeCreateWithoutCompletedByInput, Prisma.ChallengeUncheckedCreateWithoutCompletedByInput>
  where?: Prisma.ChallengeWhereInput
}

export type ChallengeUpdateToOneWithWhereWithoutCompletedByInput = {
  where?: Prisma.ChallengeWhereInput
  data: Prisma.XOR<Prisma.ChallengeUpdateWithoutCompletedByInput, Prisma.ChallengeUncheckedUpdateWithoutCompletedByInput>
}

export type ChallengeUpdateWithoutCompletedByInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  solved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hints?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ChallengeUncheckedUpdateWithoutCompletedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  key?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  solved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hints?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type ChallengeCountOutputType
 */

export type ChallengeCountOutputType = {
  completedBy: number
}

export type ChallengeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  completedBy?: boolean | ChallengeCountOutputTypeCountCompletedByArgs
}

/**
 * ChallengeCountOutputType without action
 */
export type ChallengeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChallengeCountOutputType
   */
  select?: Prisma.ChallengeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChallengeCountOutputType without action
 */
export type ChallengeCountOutputTypeCountCompletedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CompletedChallengeWhereInput
}


export type ChallengeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  name?: boolean
  category?: boolean
  difficulty?: boolean
  description?: boolean
  solved?: boolean
  hints?: boolean
  completedBy?: boolean | Prisma.Challenge$completedByArgs<ExtArgs>
  _count?: boolean | Prisma.ChallengeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["challenge"]>

export type ChallengeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  name?: boolean
  category?: boolean
  difficulty?: boolean
  description?: boolean
  solved?: boolean
  hints?: boolean
}, ExtArgs["result"]["challenge"]>

export type ChallengeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  name?: boolean
  category?: boolean
  difficulty?: boolean
  description?: boolean
  solved?: boolean
  hints?: boolean
}, ExtArgs["result"]["challenge"]>

export type ChallengeSelectScalar = {
  id?: boolean
  key?: boolean
  name?: boolean
  category?: boolean
  difficulty?: boolean
  description?: boolean
  solved?: boolean
  hints?: boolean
}

export type ChallengeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "key" | "name" | "category" | "difficulty" | "description" | "solved" | "hints", ExtArgs["result"]["challenge"]>
export type ChallengeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  completedBy?: boolean | Prisma.Challenge$completedByArgs<ExtArgs>
  _count?: boolean | Prisma.ChallengeCountOutputTypeDefaultArgs<ExtArgs>
}
export type ChallengeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ChallengeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ChallengePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Challenge"
  objects: {
    completedBy: Prisma.$CompletedChallengePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    key: string
    name: string
    category: string
    difficulty: number
    description: string
    solved: boolean
    hints: string | null
  }, ExtArgs["result"]["challenge"]>
  composites: {}
}

export type ChallengeGetPayload<S extends boolean | null | undefined | ChallengeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChallengePayload, S>

export type ChallengeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChallengeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChallengeCountAggregateInputType | true
  }

export interface ChallengeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Challenge'], meta: { name: 'Challenge' } }
  /**
   * Find zero or one Challenge that matches the filter.
   * @param {ChallengeFindUniqueArgs} args - Arguments to find a Challenge
   * @example
   * // Get one Challenge
   * const challenge = await prisma.challenge.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChallengeFindUniqueArgs>(args: Prisma.SelectSubset<T, ChallengeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Challenge that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChallengeFindUniqueOrThrowArgs} args - Arguments to find a Challenge
   * @example
   * // Get one Challenge
   * const challenge = await prisma.challenge.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChallengeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChallengeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Challenge that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeFindFirstArgs} args - Arguments to find a Challenge
   * @example
   * // Get one Challenge
   * const challenge = await prisma.challenge.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChallengeFindFirstArgs>(args?: Prisma.SelectSubset<T, ChallengeFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Challenge that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeFindFirstOrThrowArgs} args - Arguments to find a Challenge
   * @example
   * // Get one Challenge
   * const challenge = await prisma.challenge.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChallengeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChallengeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Challenges that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Challenges
   * const challenges = await prisma.challenge.findMany()
   * 
   * // Get first 10 Challenges
   * const challenges = await prisma.challenge.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const challengeWithIdOnly = await prisma.challenge.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChallengeFindManyArgs>(args?: Prisma.SelectSubset<T, ChallengeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Challenge.
   * @param {ChallengeCreateArgs} args - Arguments to create a Challenge.
   * @example
   * // Create one Challenge
   * const Challenge = await prisma.challenge.create({
   *   data: {
   *     // ... data to create a Challenge
   *   }
   * })
   * 
   */
  create<T extends ChallengeCreateArgs>(args: Prisma.SelectSubset<T, ChallengeCreateArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Challenges.
   * @param {ChallengeCreateManyArgs} args - Arguments to create many Challenges.
   * @example
   * // Create many Challenges
   * const challenge = await prisma.challenge.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChallengeCreateManyArgs>(args?: Prisma.SelectSubset<T, ChallengeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Challenges and returns the data saved in the database.
   * @param {ChallengeCreateManyAndReturnArgs} args - Arguments to create many Challenges.
   * @example
   * // Create many Challenges
   * const challenge = await prisma.challenge.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Challenges and only return the `id`
   * const challengeWithIdOnly = await prisma.challenge.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChallengeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChallengeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Challenge.
   * @param {ChallengeDeleteArgs} args - Arguments to delete one Challenge.
   * @example
   * // Delete one Challenge
   * const Challenge = await prisma.challenge.delete({
   *   where: {
   *     // ... filter to delete one Challenge
   *   }
   * })
   * 
   */
  delete<T extends ChallengeDeleteArgs>(args: Prisma.SelectSubset<T, ChallengeDeleteArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Challenge.
   * @param {ChallengeUpdateArgs} args - Arguments to update one Challenge.
   * @example
   * // Update one Challenge
   * const challenge = await prisma.challenge.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChallengeUpdateArgs>(args: Prisma.SelectSubset<T, ChallengeUpdateArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Challenges.
   * @param {ChallengeDeleteManyArgs} args - Arguments to filter Challenges to delete.
   * @example
   * // Delete a few Challenges
   * const { count } = await prisma.challenge.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChallengeDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChallengeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Challenges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Challenges
   * const challenge = await prisma.challenge.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChallengeUpdateManyArgs>(args: Prisma.SelectSubset<T, ChallengeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Challenges and returns the data updated in the database.
   * @param {ChallengeUpdateManyAndReturnArgs} args - Arguments to update many Challenges.
   * @example
   * // Update many Challenges
   * const challenge = await prisma.challenge.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Challenges and only return the `id`
   * const challengeWithIdOnly = await prisma.challenge.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChallengeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChallengeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Challenge.
   * @param {ChallengeUpsertArgs} args - Arguments to update or create a Challenge.
   * @example
   * // Update or create a Challenge
   * const challenge = await prisma.challenge.upsert({
   *   create: {
   *     // ... data to create a Challenge
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Challenge we want to update
   *   }
   * })
   */
  upsert<T extends ChallengeUpsertArgs>(args: Prisma.SelectSubset<T, ChallengeUpsertArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Challenges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeCountArgs} args - Arguments to filter Challenges to count.
   * @example
   * // Count the number of Challenges
   * const count = await prisma.challenge.count({
   *   where: {
   *     // ... the filter for the Challenges we want to count
   *   }
   * })
  **/
  count<T extends ChallengeCountArgs>(
    args?: Prisma.Subset<T, ChallengeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChallengeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Challenge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChallengeAggregateArgs>(args: Prisma.Subset<T, ChallengeAggregateArgs>): Prisma.PrismaPromise<GetChallengeAggregateType<T>>

  /**
   * Group by Challenge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChallengeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChallengeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChallengeGroupByArgs['orderBy'] }
      : { orderBy?: ChallengeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChallengeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChallengeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Challenge model
 */
readonly fields: ChallengeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Challenge.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChallengeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  completedBy<T extends Prisma.Challenge$completedByArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Challenge$completedByArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Challenge model
 */
export interface ChallengeFieldRefs {
  readonly id: Prisma.FieldRef<"Challenge", 'Int'>
  readonly key: Prisma.FieldRef<"Challenge", 'String'>
  readonly name: Prisma.FieldRef<"Challenge", 'String'>
  readonly category: Prisma.FieldRef<"Challenge", 'String'>
  readonly difficulty: Prisma.FieldRef<"Challenge", 'Int'>
  readonly description: Prisma.FieldRef<"Challenge", 'String'>
  readonly solved: Prisma.FieldRef<"Challenge", 'Boolean'>
  readonly hints: Prisma.FieldRef<"Challenge", 'String'>
}
    

// Custom InputTypes
/**
 * Challenge findUnique
 */
export type ChallengeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
  /**
   * Filter, which Challenge to fetch.
   */
  where: Prisma.ChallengeWhereUniqueInput
}

/**
 * Challenge findUniqueOrThrow
 */
export type ChallengeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
  /**
   * Filter, which Challenge to fetch.
   */
  where: Prisma.ChallengeWhereUniqueInput
}

/**
 * Challenge findFirst
 */
export type ChallengeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
  /**
   * Filter, which Challenge to fetch.
   */
  where?: Prisma.ChallengeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Challenges to fetch.
   */
  orderBy?: Prisma.ChallengeOrderByWithRelationInput | Prisma.ChallengeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Challenges.
   */
  cursor?: Prisma.ChallengeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Challenges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Challenges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Challenges.
   */
  distinct?: Prisma.ChallengeScalarFieldEnum | Prisma.ChallengeScalarFieldEnum[]
}

/**
 * Challenge findFirstOrThrow
 */
export type ChallengeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
  /**
   * Filter, which Challenge to fetch.
   */
  where?: Prisma.ChallengeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Challenges to fetch.
   */
  orderBy?: Prisma.ChallengeOrderByWithRelationInput | Prisma.ChallengeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Challenges.
   */
  cursor?: Prisma.ChallengeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Challenges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Challenges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Challenges.
   */
  distinct?: Prisma.ChallengeScalarFieldEnum | Prisma.ChallengeScalarFieldEnum[]
}

/**
 * Challenge findMany
 */
export type ChallengeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
  /**
   * Filter, which Challenges to fetch.
   */
  where?: Prisma.ChallengeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Challenges to fetch.
   */
  orderBy?: Prisma.ChallengeOrderByWithRelationInput | Prisma.ChallengeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Challenges.
   */
  cursor?: Prisma.ChallengeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Challenges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Challenges.
   */
  skip?: number
  distinct?: Prisma.ChallengeScalarFieldEnum | Prisma.ChallengeScalarFieldEnum[]
}

/**
 * Challenge create
 */
export type ChallengeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
  /**
   * The data needed to create a Challenge.
   */
  data: Prisma.XOR<Prisma.ChallengeCreateInput, Prisma.ChallengeUncheckedCreateInput>
}

/**
 * Challenge createMany
 */
export type ChallengeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Challenges.
   */
  data: Prisma.ChallengeCreateManyInput | Prisma.ChallengeCreateManyInput[]
}

/**
 * Challenge createManyAndReturn
 */
export type ChallengeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * The data used to create many Challenges.
   */
  data: Prisma.ChallengeCreateManyInput | Prisma.ChallengeCreateManyInput[]
}

/**
 * Challenge update
 */
export type ChallengeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
  /**
   * The data needed to update a Challenge.
   */
  data: Prisma.XOR<Prisma.ChallengeUpdateInput, Prisma.ChallengeUncheckedUpdateInput>
  /**
   * Choose, which Challenge to update.
   */
  where: Prisma.ChallengeWhereUniqueInput
}

/**
 * Challenge updateMany
 */
export type ChallengeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Challenges.
   */
  data: Prisma.XOR<Prisma.ChallengeUpdateManyMutationInput, Prisma.ChallengeUncheckedUpdateManyInput>
  /**
   * Filter which Challenges to update
   */
  where?: Prisma.ChallengeWhereInput
  /**
   * Limit how many Challenges to update.
   */
  limit?: number
}

/**
 * Challenge updateManyAndReturn
 */
export type ChallengeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * The data used to update Challenges.
   */
  data: Prisma.XOR<Prisma.ChallengeUpdateManyMutationInput, Prisma.ChallengeUncheckedUpdateManyInput>
  /**
   * Filter which Challenges to update
   */
  where?: Prisma.ChallengeWhereInput
  /**
   * Limit how many Challenges to update.
   */
  limit?: number
}

/**
 * Challenge upsert
 */
export type ChallengeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
  /**
   * The filter to search for the Challenge to update in case it exists.
   */
  where: Prisma.ChallengeWhereUniqueInput
  /**
   * In case the Challenge found by the `where` argument doesn't exist, create a new Challenge with this data.
   */
  create: Prisma.XOR<Prisma.ChallengeCreateInput, Prisma.ChallengeUncheckedCreateInput>
  /**
   * In case the Challenge was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChallengeUpdateInput, Prisma.ChallengeUncheckedUpdateInput>
}

/**
 * Challenge delete
 */
export type ChallengeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
  /**
   * Filter which Challenge to delete.
   */
  where: Prisma.ChallengeWhereUniqueInput
}

/**
 * Challenge deleteMany
 */
export type ChallengeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Challenges to delete
   */
  where?: Prisma.ChallengeWhereInput
  /**
   * Limit how many Challenges to delete.
   */
  limit?: number
}

/**
 * Challenge.completedBy
 */
export type Challenge$completedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  where?: Prisma.CompletedChallengeWhereInput
  orderBy?: Prisma.CompletedChallengeOrderByWithRelationInput | Prisma.CompletedChallengeOrderByWithRelationInput[]
  cursor?: Prisma.CompletedChallengeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CompletedChallengeScalarFieldEnum | Prisma.CompletedChallengeScalarFieldEnum[]
}

/**
 * Challenge without action
 */
export type ChallengeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Challenge
   */
  select?: Prisma.ChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Challenge
   */
  omit?: Prisma.ChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChallengeInclude<ExtArgs> | null
}
