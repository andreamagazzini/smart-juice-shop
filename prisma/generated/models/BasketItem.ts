
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `BasketItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model BasketItem
 * 
 */
export type BasketItemModel = runtime.Types.Result.DefaultSelection<Prisma.$BasketItemPayload>

export type AggregateBasketItem = {
  _count: BasketItemCountAggregateOutputType | null
  _avg: BasketItemAvgAggregateOutputType | null
  _sum: BasketItemSumAggregateOutputType | null
  _min: BasketItemMinAggregateOutputType | null
  _max: BasketItemMaxAggregateOutputType | null
}

export type BasketItemAvgAggregateOutputType = {
  id: number | null
  basketId: number | null
  productId: number | null
  quantity: number | null
}

export type BasketItemSumAggregateOutputType = {
  id: number | null
  basketId: number | null
  productId: number | null
  quantity: number | null
}

export type BasketItemMinAggregateOutputType = {
  id: number | null
  basketId: number | null
  productId: number | null
  quantity: number | null
}

export type BasketItemMaxAggregateOutputType = {
  id: number | null
  basketId: number | null
  productId: number | null
  quantity: number | null
}

export type BasketItemCountAggregateOutputType = {
  id: number
  basketId: number
  productId: number
  quantity: number
  _all: number
}


export type BasketItemAvgAggregateInputType = {
  id?: true
  basketId?: true
  productId?: true
  quantity?: true
}

export type BasketItemSumAggregateInputType = {
  id?: true
  basketId?: true
  productId?: true
  quantity?: true
}

export type BasketItemMinAggregateInputType = {
  id?: true
  basketId?: true
  productId?: true
  quantity?: true
}

export type BasketItemMaxAggregateInputType = {
  id?: true
  basketId?: true
  productId?: true
  quantity?: true
}

export type BasketItemCountAggregateInputType = {
  id?: true
  basketId?: true
  productId?: true
  quantity?: true
  _all?: true
}

export type BasketItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BasketItem to aggregate.
   */
  where?: Prisma.BasketItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BasketItems to fetch.
   */
  orderBy?: Prisma.BasketItemOrderByWithRelationInput | Prisma.BasketItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BasketItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BasketItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BasketItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BasketItems
  **/
  _count?: true | BasketItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BasketItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BasketItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BasketItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BasketItemMaxAggregateInputType
}

export type GetBasketItemAggregateType<T extends BasketItemAggregateArgs> = {
      [P in keyof T & keyof AggregateBasketItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBasketItem[P]>
    : Prisma.GetScalarType<T[P], AggregateBasketItem[P]>
}




export type BasketItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BasketItemWhereInput
  orderBy?: Prisma.BasketItemOrderByWithAggregationInput | Prisma.BasketItemOrderByWithAggregationInput[]
  by: Prisma.BasketItemScalarFieldEnum[] | Prisma.BasketItemScalarFieldEnum
  having?: Prisma.BasketItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BasketItemCountAggregateInputType | true
  _avg?: BasketItemAvgAggregateInputType
  _sum?: BasketItemSumAggregateInputType
  _min?: BasketItemMinAggregateInputType
  _max?: BasketItemMaxAggregateInputType
}

export type BasketItemGroupByOutputType = {
  id: number
  basketId: number
  productId: number
  quantity: number
  _count: BasketItemCountAggregateOutputType | null
  _avg: BasketItemAvgAggregateOutputType | null
  _sum: BasketItemSumAggregateOutputType | null
  _min: BasketItemMinAggregateOutputType | null
  _max: BasketItemMaxAggregateOutputType | null
}

type GetBasketItemGroupByPayload<T extends BasketItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BasketItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BasketItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BasketItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BasketItemGroupByOutputType[P]>
      }
    >
  >



export type BasketItemWhereInput = {
  AND?: Prisma.BasketItemWhereInput | Prisma.BasketItemWhereInput[]
  OR?: Prisma.BasketItemWhereInput[]
  NOT?: Prisma.BasketItemWhereInput | Prisma.BasketItemWhereInput[]
  id?: Prisma.IntFilter<"BasketItem"> | number
  basketId?: Prisma.IntFilter<"BasketItem"> | number
  productId?: Prisma.IntFilter<"BasketItem"> | number
  quantity?: Prisma.IntFilter<"BasketItem"> | number
  Basket?: Prisma.XOR<Prisma.BasketScalarRelationFilter, Prisma.BasketWhereInput>
  Product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type BasketItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  basketId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  Basket?: Prisma.BasketOrderByWithRelationInput
  Product?: Prisma.ProductOrderByWithRelationInput
}

export type BasketItemWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  basketId_productId?: Prisma.BasketItemBasketIdProductIdCompoundUniqueInput
  AND?: Prisma.BasketItemWhereInput | Prisma.BasketItemWhereInput[]
  OR?: Prisma.BasketItemWhereInput[]
  NOT?: Prisma.BasketItemWhereInput | Prisma.BasketItemWhereInput[]
  basketId?: Prisma.IntFilter<"BasketItem"> | number
  productId?: Prisma.IntFilter<"BasketItem"> | number
  quantity?: Prisma.IntFilter<"BasketItem"> | number
  Basket?: Prisma.XOR<Prisma.BasketScalarRelationFilter, Prisma.BasketWhereInput>
  Product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id" | "basketId_productId">

export type BasketItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  basketId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  _count?: Prisma.BasketItemCountOrderByAggregateInput
  _avg?: Prisma.BasketItemAvgOrderByAggregateInput
  _max?: Prisma.BasketItemMaxOrderByAggregateInput
  _min?: Prisma.BasketItemMinOrderByAggregateInput
  _sum?: Prisma.BasketItemSumOrderByAggregateInput
}

export type BasketItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.BasketItemScalarWhereWithAggregatesInput | Prisma.BasketItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.BasketItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BasketItemScalarWhereWithAggregatesInput | Prisma.BasketItemScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"BasketItem"> | number
  basketId?: Prisma.IntWithAggregatesFilter<"BasketItem"> | number
  productId?: Prisma.IntWithAggregatesFilter<"BasketItem"> | number
  quantity?: Prisma.IntWithAggregatesFilter<"BasketItem"> | number
}

export type BasketItemCreateInput = {
  quantity?: number
  Basket: Prisma.BasketCreateNestedOneWithoutItemsInput
  Product: Prisma.ProductCreateNestedOneWithoutBasketItemsInput
}

export type BasketItemUncheckedCreateInput = {
  id?: number
  basketId: number
  productId: number
  quantity?: number
}

export type BasketItemUpdateInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  Basket?: Prisma.BasketUpdateOneRequiredWithoutItemsNestedInput
  Product?: Prisma.ProductUpdateOneRequiredWithoutBasketItemsNestedInput
}

export type BasketItemUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  basketId?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BasketItemCreateManyInput = {
  id?: number
  basketId: number
  productId: number
  quantity?: number
}

export type BasketItemUpdateManyMutationInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BasketItemUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  basketId?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BasketItemListRelationFilter = {
  every?: Prisma.BasketItemWhereInput
  some?: Prisma.BasketItemWhereInput
  none?: Prisma.BasketItemWhereInput
}

export type BasketItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BasketItemBasketIdProductIdCompoundUniqueInput = {
  basketId: number
  productId: number
}

export type BasketItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  basketId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type BasketItemAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  basketId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type BasketItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  basketId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type BasketItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  basketId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type BasketItemSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  basketId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
}

export type BasketItemCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.BasketItemCreateWithoutProductInput, Prisma.BasketItemUncheckedCreateWithoutProductInput> | Prisma.BasketItemCreateWithoutProductInput[] | Prisma.BasketItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.BasketItemCreateOrConnectWithoutProductInput | Prisma.BasketItemCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.BasketItemCreateManyProductInputEnvelope
  connect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
}

export type BasketItemUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.BasketItemCreateWithoutProductInput, Prisma.BasketItemUncheckedCreateWithoutProductInput> | Prisma.BasketItemCreateWithoutProductInput[] | Prisma.BasketItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.BasketItemCreateOrConnectWithoutProductInput | Prisma.BasketItemCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.BasketItemCreateManyProductInputEnvelope
  connect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
}

export type BasketItemUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.BasketItemCreateWithoutProductInput, Prisma.BasketItemUncheckedCreateWithoutProductInput> | Prisma.BasketItemCreateWithoutProductInput[] | Prisma.BasketItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.BasketItemCreateOrConnectWithoutProductInput | Prisma.BasketItemCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.BasketItemUpsertWithWhereUniqueWithoutProductInput | Prisma.BasketItemUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.BasketItemCreateManyProductInputEnvelope
  set?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  disconnect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  delete?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  connect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  update?: Prisma.BasketItemUpdateWithWhereUniqueWithoutProductInput | Prisma.BasketItemUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.BasketItemUpdateManyWithWhereWithoutProductInput | Prisma.BasketItemUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.BasketItemScalarWhereInput | Prisma.BasketItemScalarWhereInput[]
}

export type BasketItemUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.BasketItemCreateWithoutProductInput, Prisma.BasketItemUncheckedCreateWithoutProductInput> | Prisma.BasketItemCreateWithoutProductInput[] | Prisma.BasketItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.BasketItemCreateOrConnectWithoutProductInput | Prisma.BasketItemCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.BasketItemUpsertWithWhereUniqueWithoutProductInput | Prisma.BasketItemUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.BasketItemCreateManyProductInputEnvelope
  set?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  disconnect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  delete?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  connect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  update?: Prisma.BasketItemUpdateWithWhereUniqueWithoutProductInput | Prisma.BasketItemUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.BasketItemUpdateManyWithWhereWithoutProductInput | Prisma.BasketItemUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.BasketItemScalarWhereInput | Prisma.BasketItemScalarWhereInput[]
}

export type BasketItemCreateNestedManyWithoutBasketInput = {
  create?: Prisma.XOR<Prisma.BasketItemCreateWithoutBasketInput, Prisma.BasketItemUncheckedCreateWithoutBasketInput> | Prisma.BasketItemCreateWithoutBasketInput[] | Prisma.BasketItemUncheckedCreateWithoutBasketInput[]
  connectOrCreate?: Prisma.BasketItemCreateOrConnectWithoutBasketInput | Prisma.BasketItemCreateOrConnectWithoutBasketInput[]
  createMany?: Prisma.BasketItemCreateManyBasketInputEnvelope
  connect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
}

export type BasketItemUncheckedCreateNestedManyWithoutBasketInput = {
  create?: Prisma.XOR<Prisma.BasketItemCreateWithoutBasketInput, Prisma.BasketItemUncheckedCreateWithoutBasketInput> | Prisma.BasketItemCreateWithoutBasketInput[] | Prisma.BasketItemUncheckedCreateWithoutBasketInput[]
  connectOrCreate?: Prisma.BasketItemCreateOrConnectWithoutBasketInput | Prisma.BasketItemCreateOrConnectWithoutBasketInput[]
  createMany?: Prisma.BasketItemCreateManyBasketInputEnvelope
  connect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
}

export type BasketItemUpdateManyWithoutBasketNestedInput = {
  create?: Prisma.XOR<Prisma.BasketItemCreateWithoutBasketInput, Prisma.BasketItemUncheckedCreateWithoutBasketInput> | Prisma.BasketItemCreateWithoutBasketInput[] | Prisma.BasketItemUncheckedCreateWithoutBasketInput[]
  connectOrCreate?: Prisma.BasketItemCreateOrConnectWithoutBasketInput | Prisma.BasketItemCreateOrConnectWithoutBasketInput[]
  upsert?: Prisma.BasketItemUpsertWithWhereUniqueWithoutBasketInput | Prisma.BasketItemUpsertWithWhereUniqueWithoutBasketInput[]
  createMany?: Prisma.BasketItemCreateManyBasketInputEnvelope
  set?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  disconnect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  delete?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  connect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  update?: Prisma.BasketItemUpdateWithWhereUniqueWithoutBasketInput | Prisma.BasketItemUpdateWithWhereUniqueWithoutBasketInput[]
  updateMany?: Prisma.BasketItemUpdateManyWithWhereWithoutBasketInput | Prisma.BasketItemUpdateManyWithWhereWithoutBasketInput[]
  deleteMany?: Prisma.BasketItemScalarWhereInput | Prisma.BasketItemScalarWhereInput[]
}

export type BasketItemUncheckedUpdateManyWithoutBasketNestedInput = {
  create?: Prisma.XOR<Prisma.BasketItemCreateWithoutBasketInput, Prisma.BasketItemUncheckedCreateWithoutBasketInput> | Prisma.BasketItemCreateWithoutBasketInput[] | Prisma.BasketItemUncheckedCreateWithoutBasketInput[]
  connectOrCreate?: Prisma.BasketItemCreateOrConnectWithoutBasketInput | Prisma.BasketItemCreateOrConnectWithoutBasketInput[]
  upsert?: Prisma.BasketItemUpsertWithWhereUniqueWithoutBasketInput | Prisma.BasketItemUpsertWithWhereUniqueWithoutBasketInput[]
  createMany?: Prisma.BasketItemCreateManyBasketInputEnvelope
  set?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  disconnect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  delete?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  connect?: Prisma.BasketItemWhereUniqueInput | Prisma.BasketItemWhereUniqueInput[]
  update?: Prisma.BasketItemUpdateWithWhereUniqueWithoutBasketInput | Prisma.BasketItemUpdateWithWhereUniqueWithoutBasketInput[]
  updateMany?: Prisma.BasketItemUpdateManyWithWhereWithoutBasketInput | Prisma.BasketItemUpdateManyWithWhereWithoutBasketInput[]
  deleteMany?: Prisma.BasketItemScalarWhereInput | Prisma.BasketItemScalarWhereInput[]
}

export type BasketItemCreateWithoutProductInput = {
  quantity?: number
  Basket: Prisma.BasketCreateNestedOneWithoutItemsInput
}

export type BasketItemUncheckedCreateWithoutProductInput = {
  id?: number
  basketId: number
  quantity?: number
}

export type BasketItemCreateOrConnectWithoutProductInput = {
  where: Prisma.BasketItemWhereUniqueInput
  create: Prisma.XOR<Prisma.BasketItemCreateWithoutProductInput, Prisma.BasketItemUncheckedCreateWithoutProductInput>
}

export type BasketItemCreateManyProductInputEnvelope = {
  data: Prisma.BasketItemCreateManyProductInput | Prisma.BasketItemCreateManyProductInput[]
}

export type BasketItemUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.BasketItemWhereUniqueInput
  update: Prisma.XOR<Prisma.BasketItemUpdateWithoutProductInput, Prisma.BasketItemUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.BasketItemCreateWithoutProductInput, Prisma.BasketItemUncheckedCreateWithoutProductInput>
}

export type BasketItemUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.BasketItemWhereUniqueInput
  data: Prisma.XOR<Prisma.BasketItemUpdateWithoutProductInput, Prisma.BasketItemUncheckedUpdateWithoutProductInput>
}

export type BasketItemUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.BasketItemScalarWhereInput
  data: Prisma.XOR<Prisma.BasketItemUpdateManyMutationInput, Prisma.BasketItemUncheckedUpdateManyWithoutProductInput>
}

export type BasketItemScalarWhereInput = {
  AND?: Prisma.BasketItemScalarWhereInput | Prisma.BasketItemScalarWhereInput[]
  OR?: Prisma.BasketItemScalarWhereInput[]
  NOT?: Prisma.BasketItemScalarWhereInput | Prisma.BasketItemScalarWhereInput[]
  id?: Prisma.IntFilter<"BasketItem"> | number
  basketId?: Prisma.IntFilter<"BasketItem"> | number
  productId?: Prisma.IntFilter<"BasketItem"> | number
  quantity?: Prisma.IntFilter<"BasketItem"> | number
}

export type BasketItemCreateWithoutBasketInput = {
  quantity?: number
  Product: Prisma.ProductCreateNestedOneWithoutBasketItemsInput
}

export type BasketItemUncheckedCreateWithoutBasketInput = {
  id?: number
  productId: number
  quantity?: number
}

export type BasketItemCreateOrConnectWithoutBasketInput = {
  where: Prisma.BasketItemWhereUniqueInput
  create: Prisma.XOR<Prisma.BasketItemCreateWithoutBasketInput, Prisma.BasketItemUncheckedCreateWithoutBasketInput>
}

export type BasketItemCreateManyBasketInputEnvelope = {
  data: Prisma.BasketItemCreateManyBasketInput | Prisma.BasketItemCreateManyBasketInput[]
}

export type BasketItemUpsertWithWhereUniqueWithoutBasketInput = {
  where: Prisma.BasketItemWhereUniqueInput
  update: Prisma.XOR<Prisma.BasketItemUpdateWithoutBasketInput, Prisma.BasketItemUncheckedUpdateWithoutBasketInput>
  create: Prisma.XOR<Prisma.BasketItemCreateWithoutBasketInput, Prisma.BasketItemUncheckedCreateWithoutBasketInput>
}

export type BasketItemUpdateWithWhereUniqueWithoutBasketInput = {
  where: Prisma.BasketItemWhereUniqueInput
  data: Prisma.XOR<Prisma.BasketItemUpdateWithoutBasketInput, Prisma.BasketItemUncheckedUpdateWithoutBasketInput>
}

export type BasketItemUpdateManyWithWhereWithoutBasketInput = {
  where: Prisma.BasketItemScalarWhereInput
  data: Prisma.XOR<Prisma.BasketItemUpdateManyMutationInput, Prisma.BasketItemUncheckedUpdateManyWithoutBasketInput>
}

export type BasketItemCreateManyProductInput = {
  id?: number
  basketId: number
  quantity?: number
}

export type BasketItemUpdateWithoutProductInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  Basket?: Prisma.BasketUpdateOneRequiredWithoutItemsNestedInput
}

export type BasketItemUncheckedUpdateWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  basketId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BasketItemUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  basketId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BasketItemCreateManyBasketInput = {
  id?: number
  productId: number
  quantity?: number
}

export type BasketItemUpdateWithoutBasketInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  Product?: Prisma.ProductUpdateOneRequiredWithoutBasketItemsNestedInput
}

export type BasketItemUncheckedUpdateWithoutBasketInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BasketItemUncheckedUpdateManyWithoutBasketInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
}



export type BasketItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  basketId?: boolean
  productId?: boolean
  quantity?: boolean
  Basket?: boolean | Prisma.BasketDefaultArgs<ExtArgs>
  Product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["basketItem"]>

export type BasketItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  basketId?: boolean
  productId?: boolean
  quantity?: boolean
  Basket?: boolean | Prisma.BasketDefaultArgs<ExtArgs>
  Product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["basketItem"]>

export type BasketItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  basketId?: boolean
  productId?: boolean
  quantity?: boolean
  Basket?: boolean | Prisma.BasketDefaultArgs<ExtArgs>
  Product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["basketItem"]>

export type BasketItemSelectScalar = {
  id?: boolean
  basketId?: boolean
  productId?: boolean
  quantity?: boolean
}

export type BasketItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "basketId" | "productId" | "quantity", ExtArgs["result"]["basketItem"]>
export type BasketItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Basket?: boolean | Prisma.BasketDefaultArgs<ExtArgs>
  Product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type BasketItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Basket?: boolean | Prisma.BasketDefaultArgs<ExtArgs>
  Product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type BasketItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Basket?: boolean | Prisma.BasketDefaultArgs<ExtArgs>
  Product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $BasketItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BasketItem"
  objects: {
    Basket: Prisma.$BasketPayload<ExtArgs>
    Product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    basketId: number
    productId: number
    quantity: number
  }, ExtArgs["result"]["basketItem"]>
  composites: {}
}

export type BasketItemGetPayload<S extends boolean | null | undefined | BasketItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BasketItemPayload, S>

export type BasketItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BasketItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BasketItemCountAggregateInputType | true
  }

export interface BasketItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BasketItem'], meta: { name: 'BasketItem' } }
  /**
   * Find zero or one BasketItem that matches the filter.
   * @param {BasketItemFindUniqueArgs} args - Arguments to find a BasketItem
   * @example
   * // Get one BasketItem
   * const basketItem = await prisma.basketItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BasketItemFindUniqueArgs>(args: Prisma.SelectSubset<T, BasketItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BasketItemClient<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BasketItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BasketItemFindUniqueOrThrowArgs} args - Arguments to find a BasketItem
   * @example
   * // Get one BasketItem
   * const basketItem = await prisma.basketItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BasketItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BasketItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BasketItemClient<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BasketItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketItemFindFirstArgs} args - Arguments to find a BasketItem
   * @example
   * // Get one BasketItem
   * const basketItem = await prisma.basketItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BasketItemFindFirstArgs>(args?: Prisma.SelectSubset<T, BasketItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__BasketItemClient<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BasketItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketItemFindFirstOrThrowArgs} args - Arguments to find a BasketItem
   * @example
   * // Get one BasketItem
   * const basketItem = await prisma.basketItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BasketItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BasketItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BasketItemClient<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BasketItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BasketItems
   * const basketItems = await prisma.basketItem.findMany()
   * 
   * // Get first 10 BasketItems
   * const basketItems = await prisma.basketItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const basketItemWithIdOnly = await prisma.basketItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BasketItemFindManyArgs>(args?: Prisma.SelectSubset<T, BasketItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BasketItem.
   * @param {BasketItemCreateArgs} args - Arguments to create a BasketItem.
   * @example
   * // Create one BasketItem
   * const BasketItem = await prisma.basketItem.create({
   *   data: {
   *     // ... data to create a BasketItem
   *   }
   * })
   * 
   */
  create<T extends BasketItemCreateArgs>(args: Prisma.SelectSubset<T, BasketItemCreateArgs<ExtArgs>>): Prisma.Prisma__BasketItemClient<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BasketItems.
   * @param {BasketItemCreateManyArgs} args - Arguments to create many BasketItems.
   * @example
   * // Create many BasketItems
   * const basketItem = await prisma.basketItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BasketItemCreateManyArgs>(args?: Prisma.SelectSubset<T, BasketItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BasketItems and returns the data saved in the database.
   * @param {BasketItemCreateManyAndReturnArgs} args - Arguments to create many BasketItems.
   * @example
   * // Create many BasketItems
   * const basketItem = await prisma.basketItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BasketItems and only return the `id`
   * const basketItemWithIdOnly = await prisma.basketItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BasketItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BasketItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BasketItem.
   * @param {BasketItemDeleteArgs} args - Arguments to delete one BasketItem.
   * @example
   * // Delete one BasketItem
   * const BasketItem = await prisma.basketItem.delete({
   *   where: {
   *     // ... filter to delete one BasketItem
   *   }
   * })
   * 
   */
  delete<T extends BasketItemDeleteArgs>(args: Prisma.SelectSubset<T, BasketItemDeleteArgs<ExtArgs>>): Prisma.Prisma__BasketItemClient<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BasketItem.
   * @param {BasketItemUpdateArgs} args - Arguments to update one BasketItem.
   * @example
   * // Update one BasketItem
   * const basketItem = await prisma.basketItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BasketItemUpdateArgs>(args: Prisma.SelectSubset<T, BasketItemUpdateArgs<ExtArgs>>): Prisma.Prisma__BasketItemClient<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BasketItems.
   * @param {BasketItemDeleteManyArgs} args - Arguments to filter BasketItems to delete.
   * @example
   * // Delete a few BasketItems
   * const { count } = await prisma.basketItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BasketItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, BasketItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BasketItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BasketItems
   * const basketItem = await prisma.basketItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BasketItemUpdateManyArgs>(args: Prisma.SelectSubset<T, BasketItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BasketItems and returns the data updated in the database.
   * @param {BasketItemUpdateManyAndReturnArgs} args - Arguments to update many BasketItems.
   * @example
   * // Update many BasketItems
   * const basketItem = await prisma.basketItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BasketItems and only return the `id`
   * const basketItemWithIdOnly = await prisma.basketItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BasketItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BasketItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BasketItem.
   * @param {BasketItemUpsertArgs} args - Arguments to update or create a BasketItem.
   * @example
   * // Update or create a BasketItem
   * const basketItem = await prisma.basketItem.upsert({
   *   create: {
   *     // ... data to create a BasketItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BasketItem we want to update
   *   }
   * })
   */
  upsert<T extends BasketItemUpsertArgs>(args: Prisma.SelectSubset<T, BasketItemUpsertArgs<ExtArgs>>): Prisma.Prisma__BasketItemClient<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BasketItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketItemCountArgs} args - Arguments to filter BasketItems to count.
   * @example
   * // Count the number of BasketItems
   * const count = await prisma.basketItem.count({
   *   where: {
   *     // ... the filter for the BasketItems we want to count
   *   }
   * })
  **/
  count<T extends BasketItemCountArgs>(
    args?: Prisma.Subset<T, BasketItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BasketItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BasketItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BasketItemAggregateArgs>(args: Prisma.Subset<T, BasketItemAggregateArgs>): Prisma.PrismaPromise<GetBasketItemAggregateType<T>>

  /**
   * Group by BasketItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BasketItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BasketItemGroupByArgs['orderBy'] }
      : { orderBy?: BasketItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BasketItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBasketItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BasketItem model
 */
readonly fields: BasketItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BasketItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BasketItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Basket<T extends Prisma.BasketDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BasketDefaultArgs<ExtArgs>>): Prisma.Prisma__BasketClient<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BasketItem model
 */
export interface BasketItemFieldRefs {
  readonly id: Prisma.FieldRef<"BasketItem", 'Int'>
  readonly basketId: Prisma.FieldRef<"BasketItem", 'Int'>
  readonly productId: Prisma.FieldRef<"BasketItem", 'Int'>
  readonly quantity: Prisma.FieldRef<"BasketItem", 'Int'>
}
    

// Custom InputTypes
/**
 * BasketItem findUnique
 */
export type BasketItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  /**
   * Filter, which BasketItem to fetch.
   */
  where: Prisma.BasketItemWhereUniqueInput
}

/**
 * BasketItem findUniqueOrThrow
 */
export type BasketItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  /**
   * Filter, which BasketItem to fetch.
   */
  where: Prisma.BasketItemWhereUniqueInput
}

/**
 * BasketItem findFirst
 */
export type BasketItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  /**
   * Filter, which BasketItem to fetch.
   */
  where?: Prisma.BasketItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BasketItems to fetch.
   */
  orderBy?: Prisma.BasketItemOrderByWithRelationInput | Prisma.BasketItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BasketItems.
   */
  cursor?: Prisma.BasketItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BasketItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BasketItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BasketItems.
   */
  distinct?: Prisma.BasketItemScalarFieldEnum | Prisma.BasketItemScalarFieldEnum[]
}

/**
 * BasketItem findFirstOrThrow
 */
export type BasketItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  /**
   * Filter, which BasketItem to fetch.
   */
  where?: Prisma.BasketItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BasketItems to fetch.
   */
  orderBy?: Prisma.BasketItemOrderByWithRelationInput | Prisma.BasketItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BasketItems.
   */
  cursor?: Prisma.BasketItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BasketItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BasketItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BasketItems.
   */
  distinct?: Prisma.BasketItemScalarFieldEnum | Prisma.BasketItemScalarFieldEnum[]
}

/**
 * BasketItem findMany
 */
export type BasketItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  /**
   * Filter, which BasketItems to fetch.
   */
  where?: Prisma.BasketItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BasketItems to fetch.
   */
  orderBy?: Prisma.BasketItemOrderByWithRelationInput | Prisma.BasketItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BasketItems.
   */
  cursor?: Prisma.BasketItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BasketItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BasketItems.
   */
  skip?: number
  distinct?: Prisma.BasketItemScalarFieldEnum | Prisma.BasketItemScalarFieldEnum[]
}

/**
 * BasketItem create
 */
export type BasketItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  /**
   * The data needed to create a BasketItem.
   */
  data: Prisma.XOR<Prisma.BasketItemCreateInput, Prisma.BasketItemUncheckedCreateInput>
}

/**
 * BasketItem createMany
 */
export type BasketItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BasketItems.
   */
  data: Prisma.BasketItemCreateManyInput | Prisma.BasketItemCreateManyInput[]
}

/**
 * BasketItem createManyAndReturn
 */
export type BasketItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * The data used to create many BasketItems.
   */
  data: Prisma.BasketItemCreateManyInput | Prisma.BasketItemCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * BasketItem update
 */
export type BasketItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  /**
   * The data needed to update a BasketItem.
   */
  data: Prisma.XOR<Prisma.BasketItemUpdateInput, Prisma.BasketItemUncheckedUpdateInput>
  /**
   * Choose, which BasketItem to update.
   */
  where: Prisma.BasketItemWhereUniqueInput
}

/**
 * BasketItem updateMany
 */
export type BasketItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BasketItems.
   */
  data: Prisma.XOR<Prisma.BasketItemUpdateManyMutationInput, Prisma.BasketItemUncheckedUpdateManyInput>
  /**
   * Filter which BasketItems to update
   */
  where?: Prisma.BasketItemWhereInput
  /**
   * Limit how many BasketItems to update.
   */
  limit?: number
}

/**
 * BasketItem updateManyAndReturn
 */
export type BasketItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * The data used to update BasketItems.
   */
  data: Prisma.XOR<Prisma.BasketItemUpdateManyMutationInput, Prisma.BasketItemUncheckedUpdateManyInput>
  /**
   * Filter which BasketItems to update
   */
  where?: Prisma.BasketItemWhereInput
  /**
   * Limit how many BasketItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * BasketItem upsert
 */
export type BasketItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  /**
   * The filter to search for the BasketItem to update in case it exists.
   */
  where: Prisma.BasketItemWhereUniqueInput
  /**
   * In case the BasketItem found by the `where` argument doesn't exist, create a new BasketItem with this data.
   */
  create: Prisma.XOR<Prisma.BasketItemCreateInput, Prisma.BasketItemUncheckedCreateInput>
  /**
   * In case the BasketItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BasketItemUpdateInput, Prisma.BasketItemUncheckedUpdateInput>
}

/**
 * BasketItem delete
 */
export type BasketItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  /**
   * Filter which BasketItem to delete.
   */
  where: Prisma.BasketItemWhereUniqueInput
}

/**
 * BasketItem deleteMany
 */
export type BasketItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BasketItems to delete
   */
  where?: Prisma.BasketItemWhereInput
  /**
   * Limit how many BasketItems to delete.
   */
  limit?: number
}

/**
 * BasketItem without action
 */
export type BasketItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
}
