
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Basket` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Basket
 * 
 */
export type BasketModel = runtime.Types.Result.DefaultSelection<Prisma.$BasketPayload>

export type AggregateBasket = {
  _count: BasketCountAggregateOutputType | null
  _avg: BasketAvgAggregateOutputType | null
  _sum: BasketSumAggregateOutputType | null
  _min: BasketMinAggregateOutputType | null
  _max: BasketMaxAggregateOutputType | null
}

export type BasketAvgAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type BasketSumAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type BasketMinAggregateOutputType = {
  id: number | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BasketMaxAggregateOutputType = {
  id: number | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BasketCountAggregateOutputType = {
  id: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BasketAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type BasketSumAggregateInputType = {
  id?: true
  userId?: true
}

export type BasketMinAggregateInputType = {
  id?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type BasketMaxAggregateInputType = {
  id?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type BasketCountAggregateInputType = {
  id?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BasketAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Basket to aggregate.
   */
  where?: Prisma.BasketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Baskets to fetch.
   */
  orderBy?: Prisma.BasketOrderByWithRelationInput | Prisma.BasketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BasketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Baskets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Baskets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Baskets
  **/
  _count?: true | BasketCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BasketAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BasketSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BasketMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BasketMaxAggregateInputType
}

export type GetBasketAggregateType<T extends BasketAggregateArgs> = {
      [P in keyof T & keyof AggregateBasket]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBasket[P]>
    : Prisma.GetScalarType<T[P], AggregateBasket[P]>
}




export type BasketGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BasketWhereInput
  orderBy?: Prisma.BasketOrderByWithAggregationInput | Prisma.BasketOrderByWithAggregationInput[]
  by: Prisma.BasketScalarFieldEnum[] | Prisma.BasketScalarFieldEnum
  having?: Prisma.BasketScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BasketCountAggregateInputType | true
  _avg?: BasketAvgAggregateInputType
  _sum?: BasketSumAggregateInputType
  _min?: BasketMinAggregateInputType
  _max?: BasketMaxAggregateInputType
}

export type BasketGroupByOutputType = {
  id: number
  userId: number
  createdAt: Date
  updatedAt: Date
  _count: BasketCountAggregateOutputType | null
  _avg: BasketAvgAggregateOutputType | null
  _sum: BasketSumAggregateOutputType | null
  _min: BasketMinAggregateOutputType | null
  _max: BasketMaxAggregateOutputType | null
}

type GetBasketGroupByPayload<T extends BasketGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BasketGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BasketGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BasketGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BasketGroupByOutputType[P]>
      }
    >
  >



export type BasketWhereInput = {
  AND?: Prisma.BasketWhereInput | Prisma.BasketWhereInput[]
  OR?: Prisma.BasketWhereInput[]
  NOT?: Prisma.BasketWhereInput | Prisma.BasketWhereInput[]
  id?: Prisma.IntFilter<"Basket"> | number
  userId?: Prisma.IntFilter<"Basket"> | number
  createdAt?: Prisma.DateTimeFilter<"Basket"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Basket"> | Date | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  items?: Prisma.BasketItemListRelationFilter
}

export type BasketOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  User?: Prisma.UserOrderByWithRelationInput
  items?: Prisma.BasketItemOrderByRelationAggregateInput
}

export type BasketWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.BasketWhereInput | Prisma.BasketWhereInput[]
  OR?: Prisma.BasketWhereInput[]
  NOT?: Prisma.BasketWhereInput | Prisma.BasketWhereInput[]
  userId?: Prisma.IntFilter<"Basket"> | number
  createdAt?: Prisma.DateTimeFilter<"Basket"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Basket"> | Date | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  items?: Prisma.BasketItemListRelationFilter
}, "id">

export type BasketOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BasketCountOrderByAggregateInput
  _avg?: Prisma.BasketAvgOrderByAggregateInput
  _max?: Prisma.BasketMaxOrderByAggregateInput
  _min?: Prisma.BasketMinOrderByAggregateInput
  _sum?: Prisma.BasketSumOrderByAggregateInput
}

export type BasketScalarWhereWithAggregatesInput = {
  AND?: Prisma.BasketScalarWhereWithAggregatesInput | Prisma.BasketScalarWhereWithAggregatesInput[]
  OR?: Prisma.BasketScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BasketScalarWhereWithAggregatesInput | Prisma.BasketScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Basket"> | number
  userId?: Prisma.IntWithAggregatesFilter<"Basket"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Basket"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Basket"> | Date | string
}

export type BasketCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  User: Prisma.UserCreateNestedOneWithoutBasketsInput
  items?: Prisma.BasketItemCreateNestedManyWithoutBasketInput
}

export type BasketUncheckedCreateInput = {
  id?: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.BasketItemUncheckedCreateNestedManyWithoutBasketInput
}

export type BasketUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUpdateOneRequiredWithoutBasketsNestedInput
  items?: Prisma.BasketItemUpdateManyWithoutBasketNestedInput
}

export type BasketUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.BasketItemUncheckedUpdateManyWithoutBasketNestedInput
}

export type BasketCreateManyInput = {
  id?: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BasketUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BasketUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BasketListRelationFilter = {
  every?: Prisma.BasketWhereInput
  some?: Prisma.BasketWhereInput
  none?: Prisma.BasketWhereInput
}

export type BasketOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BasketCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BasketAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type BasketMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BasketMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BasketSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type BasketScalarRelationFilter = {
  is?: Prisma.BasketWhereInput
  isNot?: Prisma.BasketWhereInput
}

export type BasketCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BasketCreateWithoutUserInput, Prisma.BasketUncheckedCreateWithoutUserInput> | Prisma.BasketCreateWithoutUserInput[] | Prisma.BasketUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BasketCreateOrConnectWithoutUserInput | Prisma.BasketCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BasketCreateManyUserInputEnvelope
  connect?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
}

export type BasketUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BasketCreateWithoutUserInput, Prisma.BasketUncheckedCreateWithoutUserInput> | Prisma.BasketCreateWithoutUserInput[] | Prisma.BasketUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BasketCreateOrConnectWithoutUserInput | Prisma.BasketCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BasketCreateManyUserInputEnvelope
  connect?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
}

export type BasketUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BasketCreateWithoutUserInput, Prisma.BasketUncheckedCreateWithoutUserInput> | Prisma.BasketCreateWithoutUserInput[] | Prisma.BasketUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BasketCreateOrConnectWithoutUserInput | Prisma.BasketCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BasketUpsertWithWhereUniqueWithoutUserInput | Prisma.BasketUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BasketCreateManyUserInputEnvelope
  set?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
  disconnect?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
  delete?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
  connect?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
  update?: Prisma.BasketUpdateWithWhereUniqueWithoutUserInput | Prisma.BasketUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BasketUpdateManyWithWhereWithoutUserInput | Prisma.BasketUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BasketScalarWhereInput | Prisma.BasketScalarWhereInput[]
}

export type BasketUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BasketCreateWithoutUserInput, Prisma.BasketUncheckedCreateWithoutUserInput> | Prisma.BasketCreateWithoutUserInput[] | Prisma.BasketUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BasketCreateOrConnectWithoutUserInput | Prisma.BasketCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BasketUpsertWithWhereUniqueWithoutUserInput | Prisma.BasketUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BasketCreateManyUserInputEnvelope
  set?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
  disconnect?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
  delete?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
  connect?: Prisma.BasketWhereUniqueInput | Prisma.BasketWhereUniqueInput[]
  update?: Prisma.BasketUpdateWithWhereUniqueWithoutUserInput | Prisma.BasketUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BasketUpdateManyWithWhereWithoutUserInput | Prisma.BasketUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BasketScalarWhereInput | Prisma.BasketScalarWhereInput[]
}

export type BasketCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.BasketCreateWithoutItemsInput, Prisma.BasketUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.BasketCreateOrConnectWithoutItemsInput
  connect?: Prisma.BasketWhereUniqueInput
}

export type BasketUpdateOneRequiredWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.BasketCreateWithoutItemsInput, Prisma.BasketUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.BasketCreateOrConnectWithoutItemsInput
  upsert?: Prisma.BasketUpsertWithoutItemsInput
  connect?: Prisma.BasketWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BasketUpdateToOneWithWhereWithoutItemsInput, Prisma.BasketUpdateWithoutItemsInput>, Prisma.BasketUncheckedUpdateWithoutItemsInput>
}

export type BasketCreateWithoutUserInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.BasketItemCreateNestedManyWithoutBasketInput
}

export type BasketUncheckedCreateWithoutUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.BasketItemUncheckedCreateNestedManyWithoutBasketInput
}

export type BasketCreateOrConnectWithoutUserInput = {
  where: Prisma.BasketWhereUniqueInput
  create: Prisma.XOR<Prisma.BasketCreateWithoutUserInput, Prisma.BasketUncheckedCreateWithoutUserInput>
}

export type BasketCreateManyUserInputEnvelope = {
  data: Prisma.BasketCreateManyUserInput | Prisma.BasketCreateManyUserInput[]
}

export type BasketUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.BasketWhereUniqueInput
  update: Prisma.XOR<Prisma.BasketUpdateWithoutUserInput, Prisma.BasketUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.BasketCreateWithoutUserInput, Prisma.BasketUncheckedCreateWithoutUserInput>
}

export type BasketUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.BasketWhereUniqueInput
  data: Prisma.XOR<Prisma.BasketUpdateWithoutUserInput, Prisma.BasketUncheckedUpdateWithoutUserInput>
}

export type BasketUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.BasketScalarWhereInput
  data: Prisma.XOR<Prisma.BasketUpdateManyMutationInput, Prisma.BasketUncheckedUpdateManyWithoutUserInput>
}

export type BasketScalarWhereInput = {
  AND?: Prisma.BasketScalarWhereInput | Prisma.BasketScalarWhereInput[]
  OR?: Prisma.BasketScalarWhereInput[]
  NOT?: Prisma.BasketScalarWhereInput | Prisma.BasketScalarWhereInput[]
  id?: Prisma.IntFilter<"Basket"> | number
  userId?: Prisma.IntFilter<"Basket"> | number
  createdAt?: Prisma.DateTimeFilter<"Basket"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Basket"> | Date | string
}

export type BasketCreateWithoutItemsInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  User: Prisma.UserCreateNestedOneWithoutBasketsInput
}

export type BasketUncheckedCreateWithoutItemsInput = {
  id?: number
  userId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BasketCreateOrConnectWithoutItemsInput = {
  where: Prisma.BasketWhereUniqueInput
  create: Prisma.XOR<Prisma.BasketCreateWithoutItemsInput, Prisma.BasketUncheckedCreateWithoutItemsInput>
}

export type BasketUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.BasketUpdateWithoutItemsInput, Prisma.BasketUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.BasketCreateWithoutItemsInput, Prisma.BasketUncheckedCreateWithoutItemsInput>
  where?: Prisma.BasketWhereInput
}

export type BasketUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.BasketWhereInput
  data: Prisma.XOR<Prisma.BasketUpdateWithoutItemsInput, Prisma.BasketUncheckedUpdateWithoutItemsInput>
}

export type BasketUpdateWithoutItemsInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUpdateOneRequiredWithoutBasketsNestedInput
}

export type BasketUncheckedUpdateWithoutItemsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BasketCreateManyUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BasketUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.BasketItemUpdateManyWithoutBasketNestedInput
}

export type BasketUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.BasketItemUncheckedUpdateManyWithoutBasketNestedInput
}

export type BasketUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type BasketCountOutputType
 */

export type BasketCountOutputType = {
  items: number
}

export type BasketCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | BasketCountOutputTypeCountItemsArgs
}

/**
 * BasketCountOutputType without action
 */
export type BasketCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketCountOutputType
   */
  select?: Prisma.BasketCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BasketCountOutputType without action
 */
export type BasketCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BasketItemWhereInput
}


export type BasketSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  items?: boolean | Prisma.Basket$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.BasketCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["basket"]>

export type BasketSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["basket"]>

export type BasketSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["basket"]>

export type BasketSelectScalar = {
  id?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BasketOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["basket"]>
export type BasketInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  items?: boolean | Prisma.Basket$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.BasketCountOutputTypeDefaultArgs<ExtArgs>
}
export type BasketIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type BasketIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $BasketPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Basket"
  objects: {
    User: Prisma.$UserPayload<ExtArgs>
    items: Prisma.$BasketItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["basket"]>
  composites: {}
}

export type BasketGetPayload<S extends boolean | null | undefined | BasketDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BasketPayload, S>

export type BasketCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BasketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BasketCountAggregateInputType | true
  }

export interface BasketDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Basket'], meta: { name: 'Basket' } }
  /**
   * Find zero or one Basket that matches the filter.
   * @param {BasketFindUniqueArgs} args - Arguments to find a Basket
   * @example
   * // Get one Basket
   * const basket = await prisma.basket.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BasketFindUniqueArgs>(args: Prisma.SelectSubset<T, BasketFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BasketClient<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Basket that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BasketFindUniqueOrThrowArgs} args - Arguments to find a Basket
   * @example
   * // Get one Basket
   * const basket = await prisma.basket.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BasketFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BasketFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BasketClient<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Basket that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketFindFirstArgs} args - Arguments to find a Basket
   * @example
   * // Get one Basket
   * const basket = await prisma.basket.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BasketFindFirstArgs>(args?: Prisma.SelectSubset<T, BasketFindFirstArgs<ExtArgs>>): Prisma.Prisma__BasketClient<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Basket that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketFindFirstOrThrowArgs} args - Arguments to find a Basket
   * @example
   * // Get one Basket
   * const basket = await prisma.basket.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BasketFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BasketFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BasketClient<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Baskets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Baskets
   * const baskets = await prisma.basket.findMany()
   * 
   * // Get first 10 Baskets
   * const baskets = await prisma.basket.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const basketWithIdOnly = await prisma.basket.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BasketFindManyArgs>(args?: Prisma.SelectSubset<T, BasketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Basket.
   * @param {BasketCreateArgs} args - Arguments to create a Basket.
   * @example
   * // Create one Basket
   * const Basket = await prisma.basket.create({
   *   data: {
   *     // ... data to create a Basket
   *   }
   * })
   * 
   */
  create<T extends BasketCreateArgs>(args: Prisma.SelectSubset<T, BasketCreateArgs<ExtArgs>>): Prisma.Prisma__BasketClient<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Baskets.
   * @param {BasketCreateManyArgs} args - Arguments to create many Baskets.
   * @example
   * // Create many Baskets
   * const basket = await prisma.basket.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BasketCreateManyArgs>(args?: Prisma.SelectSubset<T, BasketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Baskets and returns the data saved in the database.
   * @param {BasketCreateManyAndReturnArgs} args - Arguments to create many Baskets.
   * @example
   * // Create many Baskets
   * const basket = await prisma.basket.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Baskets and only return the `id`
   * const basketWithIdOnly = await prisma.basket.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BasketCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BasketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Basket.
   * @param {BasketDeleteArgs} args - Arguments to delete one Basket.
   * @example
   * // Delete one Basket
   * const Basket = await prisma.basket.delete({
   *   where: {
   *     // ... filter to delete one Basket
   *   }
   * })
   * 
   */
  delete<T extends BasketDeleteArgs>(args: Prisma.SelectSubset<T, BasketDeleteArgs<ExtArgs>>): Prisma.Prisma__BasketClient<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Basket.
   * @param {BasketUpdateArgs} args - Arguments to update one Basket.
   * @example
   * // Update one Basket
   * const basket = await prisma.basket.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BasketUpdateArgs>(args: Prisma.SelectSubset<T, BasketUpdateArgs<ExtArgs>>): Prisma.Prisma__BasketClient<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Baskets.
   * @param {BasketDeleteManyArgs} args - Arguments to filter Baskets to delete.
   * @example
   * // Delete a few Baskets
   * const { count } = await prisma.basket.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BasketDeleteManyArgs>(args?: Prisma.SelectSubset<T, BasketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Baskets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Baskets
   * const basket = await prisma.basket.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BasketUpdateManyArgs>(args: Prisma.SelectSubset<T, BasketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Baskets and returns the data updated in the database.
   * @param {BasketUpdateManyAndReturnArgs} args - Arguments to update many Baskets.
   * @example
   * // Update many Baskets
   * const basket = await prisma.basket.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Baskets and only return the `id`
   * const basketWithIdOnly = await prisma.basket.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BasketUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BasketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Basket.
   * @param {BasketUpsertArgs} args - Arguments to update or create a Basket.
   * @example
   * // Update or create a Basket
   * const basket = await prisma.basket.upsert({
   *   create: {
   *     // ... data to create a Basket
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Basket we want to update
   *   }
   * })
   */
  upsert<T extends BasketUpsertArgs>(args: Prisma.SelectSubset<T, BasketUpsertArgs<ExtArgs>>): Prisma.Prisma__BasketClient<runtime.Types.Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Baskets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketCountArgs} args - Arguments to filter Baskets to count.
   * @example
   * // Count the number of Baskets
   * const count = await prisma.basket.count({
   *   where: {
   *     // ... the filter for the Baskets we want to count
   *   }
   * })
  **/
  count<T extends BasketCountArgs>(
    args?: Prisma.Subset<T, BasketCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BasketCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Basket.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BasketAggregateArgs>(args: Prisma.Subset<T, BasketAggregateArgs>): Prisma.PrismaPromise<GetBasketAggregateType<T>>

  /**
   * Group by Basket.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BasketGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BasketGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BasketGroupByArgs['orderBy'] }
      : { orderBy?: BasketGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BasketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBasketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Basket model
 */
readonly fields: BasketFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Basket.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BasketClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  items<T extends Prisma.Basket$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Basket$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Basket model
 */
export interface BasketFieldRefs {
  readonly id: Prisma.FieldRef<"Basket", 'Int'>
  readonly userId: Prisma.FieldRef<"Basket", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Basket", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Basket", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Basket findUnique
 */
export type BasketFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
  /**
   * Filter, which Basket to fetch.
   */
  where: Prisma.BasketWhereUniqueInput
}

/**
 * Basket findUniqueOrThrow
 */
export type BasketFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
  /**
   * Filter, which Basket to fetch.
   */
  where: Prisma.BasketWhereUniqueInput
}

/**
 * Basket findFirst
 */
export type BasketFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
  /**
   * Filter, which Basket to fetch.
   */
  where?: Prisma.BasketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Baskets to fetch.
   */
  orderBy?: Prisma.BasketOrderByWithRelationInput | Prisma.BasketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Baskets.
   */
  cursor?: Prisma.BasketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Baskets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Baskets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Baskets.
   */
  distinct?: Prisma.BasketScalarFieldEnum | Prisma.BasketScalarFieldEnum[]
}

/**
 * Basket findFirstOrThrow
 */
export type BasketFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
  /**
   * Filter, which Basket to fetch.
   */
  where?: Prisma.BasketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Baskets to fetch.
   */
  orderBy?: Prisma.BasketOrderByWithRelationInput | Prisma.BasketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Baskets.
   */
  cursor?: Prisma.BasketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Baskets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Baskets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Baskets.
   */
  distinct?: Prisma.BasketScalarFieldEnum | Prisma.BasketScalarFieldEnum[]
}

/**
 * Basket findMany
 */
export type BasketFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
  /**
   * Filter, which Baskets to fetch.
   */
  where?: Prisma.BasketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Baskets to fetch.
   */
  orderBy?: Prisma.BasketOrderByWithRelationInput | Prisma.BasketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Baskets.
   */
  cursor?: Prisma.BasketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Baskets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Baskets.
   */
  skip?: number
  distinct?: Prisma.BasketScalarFieldEnum | Prisma.BasketScalarFieldEnum[]
}

/**
 * Basket create
 */
export type BasketCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
  /**
   * The data needed to create a Basket.
   */
  data: Prisma.XOR<Prisma.BasketCreateInput, Prisma.BasketUncheckedCreateInput>
}

/**
 * Basket createMany
 */
export type BasketCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Baskets.
   */
  data: Prisma.BasketCreateManyInput | Prisma.BasketCreateManyInput[]
}

/**
 * Basket createManyAndReturn
 */
export type BasketCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * The data used to create many Baskets.
   */
  data: Prisma.BasketCreateManyInput | Prisma.BasketCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Basket update
 */
export type BasketUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
  /**
   * The data needed to update a Basket.
   */
  data: Prisma.XOR<Prisma.BasketUpdateInput, Prisma.BasketUncheckedUpdateInput>
  /**
   * Choose, which Basket to update.
   */
  where: Prisma.BasketWhereUniqueInput
}

/**
 * Basket updateMany
 */
export type BasketUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Baskets.
   */
  data: Prisma.XOR<Prisma.BasketUpdateManyMutationInput, Prisma.BasketUncheckedUpdateManyInput>
  /**
   * Filter which Baskets to update
   */
  where?: Prisma.BasketWhereInput
  /**
   * Limit how many Baskets to update.
   */
  limit?: number
}

/**
 * Basket updateManyAndReturn
 */
export type BasketUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * The data used to update Baskets.
   */
  data: Prisma.XOR<Prisma.BasketUpdateManyMutationInput, Prisma.BasketUncheckedUpdateManyInput>
  /**
   * Filter which Baskets to update
   */
  where?: Prisma.BasketWhereInput
  /**
   * Limit how many Baskets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Basket upsert
 */
export type BasketUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
  /**
   * The filter to search for the Basket to update in case it exists.
   */
  where: Prisma.BasketWhereUniqueInput
  /**
   * In case the Basket found by the `where` argument doesn't exist, create a new Basket with this data.
   */
  create: Prisma.XOR<Prisma.BasketCreateInput, Prisma.BasketUncheckedCreateInput>
  /**
   * In case the Basket was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BasketUpdateInput, Prisma.BasketUncheckedUpdateInput>
}

/**
 * Basket delete
 */
export type BasketDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
  /**
   * Filter which Basket to delete.
   */
  where: Prisma.BasketWhereUniqueInput
}

/**
 * Basket deleteMany
 */
export type BasketDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Baskets to delete
   */
  where?: Prisma.BasketWhereInput
  /**
   * Limit how many Baskets to delete.
   */
  limit?: number
}

/**
 * Basket.items
 */
export type Basket$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BasketItem
   */
  select?: Prisma.BasketItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BasketItem
   */
  omit?: Prisma.BasketItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketItemInclude<ExtArgs> | null
  where?: Prisma.BasketItemWhereInput
  orderBy?: Prisma.BasketItemOrderByWithRelationInput | Prisma.BasketItemOrderByWithRelationInput[]
  cursor?: Prisma.BasketItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BasketItemScalarFieldEnum | Prisma.BasketItemScalarFieldEnum[]
}

/**
 * Basket without action
 */
export type BasketDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Basket
   */
  select?: Prisma.BasketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Basket
   */
  omit?: Prisma.BasketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BasketInclude<ExtArgs> | null
}
