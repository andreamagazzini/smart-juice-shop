
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CompletedChallenge` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CompletedChallenge
 * 
 */
export type CompletedChallengeModel = runtime.Types.Result.DefaultSelection<Prisma.$CompletedChallengePayload>

export type AggregateCompletedChallenge = {
  _count: CompletedChallengeCountAggregateOutputType | null
  _avg: CompletedChallengeAvgAggregateOutputType | null
  _sum: CompletedChallengeSumAggregateOutputType | null
  _min: CompletedChallengeMinAggregateOutputType | null
  _max: CompletedChallengeMaxAggregateOutputType | null
}

export type CompletedChallengeAvgAggregateOutputType = {
  id: number | null
  userId: number | null
  challengeId: number | null
}

export type CompletedChallengeSumAggregateOutputType = {
  id: number | null
  userId: number | null
  challengeId: number | null
}

export type CompletedChallengeMinAggregateOutputType = {
  id: number | null
  userId: number | null
  challengeId: number | null
  completedAt: Date | null
}

export type CompletedChallengeMaxAggregateOutputType = {
  id: number | null
  userId: number | null
  challengeId: number | null
  completedAt: Date | null
}

export type CompletedChallengeCountAggregateOutputType = {
  id: number
  userId: number
  challengeId: number
  completedAt: number
  _all: number
}


export type CompletedChallengeAvgAggregateInputType = {
  id?: true
  userId?: true
  challengeId?: true
}

export type CompletedChallengeSumAggregateInputType = {
  id?: true
  userId?: true
  challengeId?: true
}

export type CompletedChallengeMinAggregateInputType = {
  id?: true
  userId?: true
  challengeId?: true
  completedAt?: true
}

export type CompletedChallengeMaxAggregateInputType = {
  id?: true
  userId?: true
  challengeId?: true
  completedAt?: true
}

export type CompletedChallengeCountAggregateInputType = {
  id?: true
  userId?: true
  challengeId?: true
  completedAt?: true
  _all?: true
}

export type CompletedChallengeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CompletedChallenge to aggregate.
   */
  where?: Prisma.CompletedChallengeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompletedChallenges to fetch.
   */
  orderBy?: Prisma.CompletedChallengeOrderByWithRelationInput | Prisma.CompletedChallengeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CompletedChallengeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompletedChallenges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompletedChallenges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CompletedChallenges
  **/
  _count?: true | CompletedChallengeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CompletedChallengeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CompletedChallengeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CompletedChallengeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CompletedChallengeMaxAggregateInputType
}

export type GetCompletedChallengeAggregateType<T extends CompletedChallengeAggregateArgs> = {
      [P in keyof T & keyof AggregateCompletedChallenge]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCompletedChallenge[P]>
    : Prisma.GetScalarType<T[P], AggregateCompletedChallenge[P]>
}




export type CompletedChallengeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CompletedChallengeWhereInput
  orderBy?: Prisma.CompletedChallengeOrderByWithAggregationInput | Prisma.CompletedChallengeOrderByWithAggregationInput[]
  by: Prisma.CompletedChallengeScalarFieldEnum[] | Prisma.CompletedChallengeScalarFieldEnum
  having?: Prisma.CompletedChallengeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CompletedChallengeCountAggregateInputType | true
  _avg?: CompletedChallengeAvgAggregateInputType
  _sum?: CompletedChallengeSumAggregateInputType
  _min?: CompletedChallengeMinAggregateInputType
  _max?: CompletedChallengeMaxAggregateInputType
}

export type CompletedChallengeGroupByOutputType = {
  id: number
  userId: number
  challengeId: number
  completedAt: Date
  _count: CompletedChallengeCountAggregateOutputType | null
  _avg: CompletedChallengeAvgAggregateOutputType | null
  _sum: CompletedChallengeSumAggregateOutputType | null
  _min: CompletedChallengeMinAggregateOutputType | null
  _max: CompletedChallengeMaxAggregateOutputType | null
}

type GetCompletedChallengeGroupByPayload<T extends CompletedChallengeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CompletedChallengeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CompletedChallengeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CompletedChallengeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CompletedChallengeGroupByOutputType[P]>
      }
    >
  >



export type CompletedChallengeWhereInput = {
  AND?: Prisma.CompletedChallengeWhereInput | Prisma.CompletedChallengeWhereInput[]
  OR?: Prisma.CompletedChallengeWhereInput[]
  NOT?: Prisma.CompletedChallengeWhereInput | Prisma.CompletedChallengeWhereInput[]
  id?: Prisma.IntFilter<"CompletedChallenge"> | number
  userId?: Prisma.IntFilter<"CompletedChallenge"> | number
  challengeId?: Prisma.IntFilter<"CompletedChallenge"> | number
  completedAt?: Prisma.DateTimeFilter<"CompletedChallenge"> | Date | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Challenge?: Prisma.XOR<Prisma.ChallengeScalarRelationFilter, Prisma.ChallengeWhereInput>
}

export type CompletedChallengeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
  User?: Prisma.UserOrderByWithRelationInput
  Challenge?: Prisma.ChallengeOrderByWithRelationInput
}

export type CompletedChallengeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  userId_challengeId?: Prisma.CompletedChallengeUserIdChallengeIdCompoundUniqueInput
  AND?: Prisma.CompletedChallengeWhereInput | Prisma.CompletedChallengeWhereInput[]
  OR?: Prisma.CompletedChallengeWhereInput[]
  NOT?: Prisma.CompletedChallengeWhereInput | Prisma.CompletedChallengeWhereInput[]
  userId?: Prisma.IntFilter<"CompletedChallenge"> | number
  challengeId?: Prisma.IntFilter<"CompletedChallenge"> | number
  completedAt?: Prisma.DateTimeFilter<"CompletedChallenge"> | Date | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Challenge?: Prisma.XOR<Prisma.ChallengeScalarRelationFilter, Prisma.ChallengeWhereInput>
}, "id" | "userId_challengeId">

export type CompletedChallengeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
  _count?: Prisma.CompletedChallengeCountOrderByAggregateInput
  _avg?: Prisma.CompletedChallengeAvgOrderByAggregateInput
  _max?: Prisma.CompletedChallengeMaxOrderByAggregateInput
  _min?: Prisma.CompletedChallengeMinOrderByAggregateInput
  _sum?: Prisma.CompletedChallengeSumOrderByAggregateInput
}

export type CompletedChallengeScalarWhereWithAggregatesInput = {
  AND?: Prisma.CompletedChallengeScalarWhereWithAggregatesInput | Prisma.CompletedChallengeScalarWhereWithAggregatesInput[]
  OR?: Prisma.CompletedChallengeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CompletedChallengeScalarWhereWithAggregatesInput | Prisma.CompletedChallengeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"CompletedChallenge"> | number
  userId?: Prisma.IntWithAggregatesFilter<"CompletedChallenge"> | number
  challengeId?: Prisma.IntWithAggregatesFilter<"CompletedChallenge"> | number
  completedAt?: Prisma.DateTimeWithAggregatesFilter<"CompletedChallenge"> | Date | string
}

export type CompletedChallengeCreateInput = {
  completedAt?: Date | string
  User: Prisma.UserCreateNestedOneWithoutCompletedChallengesInput
  Challenge: Prisma.ChallengeCreateNestedOneWithoutCompletedByInput
}

export type CompletedChallengeUncheckedCreateInput = {
  id?: number
  userId: number
  challengeId: number
  completedAt?: Date | string
}

export type CompletedChallengeUpdateInput = {
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUpdateOneRequiredWithoutCompletedChallengesNestedInput
  Challenge?: Prisma.ChallengeUpdateOneRequiredWithoutCompletedByNestedInput
}

export type CompletedChallengeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  challengeId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompletedChallengeCreateManyInput = {
  id?: number
  userId: number
  challengeId: number
  completedAt?: Date | string
}

export type CompletedChallengeUpdateManyMutationInput = {
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompletedChallengeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  challengeId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompletedChallengeListRelationFilter = {
  every?: Prisma.CompletedChallengeWhereInput
  some?: Prisma.CompletedChallengeWhereInput
  none?: Prisma.CompletedChallengeWhereInput
}

export type CompletedChallengeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CompletedChallengeUserIdChallengeIdCompoundUniqueInput = {
  userId: number
  challengeId: number
}

export type CompletedChallengeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type CompletedChallengeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
}

export type CompletedChallengeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type CompletedChallengeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type CompletedChallengeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  challengeId?: Prisma.SortOrder
}

export type CompletedChallengeCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutUserInput, Prisma.CompletedChallengeUncheckedCreateWithoutUserInput> | Prisma.CompletedChallengeCreateWithoutUserInput[] | Prisma.CompletedChallengeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CompletedChallengeCreateOrConnectWithoutUserInput | Prisma.CompletedChallengeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CompletedChallengeCreateManyUserInputEnvelope
  connect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
}

export type CompletedChallengeUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutUserInput, Prisma.CompletedChallengeUncheckedCreateWithoutUserInput> | Prisma.CompletedChallengeCreateWithoutUserInput[] | Prisma.CompletedChallengeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CompletedChallengeCreateOrConnectWithoutUserInput | Prisma.CompletedChallengeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CompletedChallengeCreateManyUserInputEnvelope
  connect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
}

export type CompletedChallengeUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutUserInput, Prisma.CompletedChallengeUncheckedCreateWithoutUserInput> | Prisma.CompletedChallengeCreateWithoutUserInput[] | Prisma.CompletedChallengeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CompletedChallengeCreateOrConnectWithoutUserInput | Prisma.CompletedChallengeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CompletedChallengeUpsertWithWhereUniqueWithoutUserInput | Prisma.CompletedChallengeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CompletedChallengeCreateManyUserInputEnvelope
  set?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  disconnect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  delete?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  connect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  update?: Prisma.CompletedChallengeUpdateWithWhereUniqueWithoutUserInput | Prisma.CompletedChallengeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CompletedChallengeUpdateManyWithWhereWithoutUserInput | Prisma.CompletedChallengeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CompletedChallengeScalarWhereInput | Prisma.CompletedChallengeScalarWhereInput[]
}

export type CompletedChallengeUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutUserInput, Prisma.CompletedChallengeUncheckedCreateWithoutUserInput> | Prisma.CompletedChallengeCreateWithoutUserInput[] | Prisma.CompletedChallengeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CompletedChallengeCreateOrConnectWithoutUserInput | Prisma.CompletedChallengeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CompletedChallengeUpsertWithWhereUniqueWithoutUserInput | Prisma.CompletedChallengeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CompletedChallengeCreateManyUserInputEnvelope
  set?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  disconnect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  delete?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  connect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  update?: Prisma.CompletedChallengeUpdateWithWhereUniqueWithoutUserInput | Prisma.CompletedChallengeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CompletedChallengeUpdateManyWithWhereWithoutUserInput | Prisma.CompletedChallengeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CompletedChallengeScalarWhereInput | Prisma.CompletedChallengeScalarWhereInput[]
}

export type CompletedChallengeCreateNestedManyWithoutChallengeInput = {
  create?: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutChallengeInput, Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput> | Prisma.CompletedChallengeCreateWithoutChallengeInput[] | Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput[]
  connectOrCreate?: Prisma.CompletedChallengeCreateOrConnectWithoutChallengeInput | Prisma.CompletedChallengeCreateOrConnectWithoutChallengeInput[]
  createMany?: Prisma.CompletedChallengeCreateManyChallengeInputEnvelope
  connect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
}

export type CompletedChallengeUncheckedCreateNestedManyWithoutChallengeInput = {
  create?: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutChallengeInput, Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput> | Prisma.CompletedChallengeCreateWithoutChallengeInput[] | Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput[]
  connectOrCreate?: Prisma.CompletedChallengeCreateOrConnectWithoutChallengeInput | Prisma.CompletedChallengeCreateOrConnectWithoutChallengeInput[]
  createMany?: Prisma.CompletedChallengeCreateManyChallengeInputEnvelope
  connect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
}

export type CompletedChallengeUpdateManyWithoutChallengeNestedInput = {
  create?: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutChallengeInput, Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput> | Prisma.CompletedChallengeCreateWithoutChallengeInput[] | Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput[]
  connectOrCreate?: Prisma.CompletedChallengeCreateOrConnectWithoutChallengeInput | Prisma.CompletedChallengeCreateOrConnectWithoutChallengeInput[]
  upsert?: Prisma.CompletedChallengeUpsertWithWhereUniqueWithoutChallengeInput | Prisma.CompletedChallengeUpsertWithWhereUniqueWithoutChallengeInput[]
  createMany?: Prisma.CompletedChallengeCreateManyChallengeInputEnvelope
  set?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  disconnect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  delete?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  connect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  update?: Prisma.CompletedChallengeUpdateWithWhereUniqueWithoutChallengeInput | Prisma.CompletedChallengeUpdateWithWhereUniqueWithoutChallengeInput[]
  updateMany?: Prisma.CompletedChallengeUpdateManyWithWhereWithoutChallengeInput | Prisma.CompletedChallengeUpdateManyWithWhereWithoutChallengeInput[]
  deleteMany?: Prisma.CompletedChallengeScalarWhereInput | Prisma.CompletedChallengeScalarWhereInput[]
}

export type CompletedChallengeUncheckedUpdateManyWithoutChallengeNestedInput = {
  create?: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutChallengeInput, Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput> | Prisma.CompletedChallengeCreateWithoutChallengeInput[] | Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput[]
  connectOrCreate?: Prisma.CompletedChallengeCreateOrConnectWithoutChallengeInput | Prisma.CompletedChallengeCreateOrConnectWithoutChallengeInput[]
  upsert?: Prisma.CompletedChallengeUpsertWithWhereUniqueWithoutChallengeInput | Prisma.CompletedChallengeUpsertWithWhereUniqueWithoutChallengeInput[]
  createMany?: Prisma.CompletedChallengeCreateManyChallengeInputEnvelope
  set?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  disconnect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  delete?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  connect?: Prisma.CompletedChallengeWhereUniqueInput | Prisma.CompletedChallengeWhereUniqueInput[]
  update?: Prisma.CompletedChallengeUpdateWithWhereUniqueWithoutChallengeInput | Prisma.CompletedChallengeUpdateWithWhereUniqueWithoutChallengeInput[]
  updateMany?: Prisma.CompletedChallengeUpdateManyWithWhereWithoutChallengeInput | Prisma.CompletedChallengeUpdateManyWithWhereWithoutChallengeInput[]
  deleteMany?: Prisma.CompletedChallengeScalarWhereInput | Prisma.CompletedChallengeScalarWhereInput[]
}

export type CompletedChallengeCreateWithoutUserInput = {
  completedAt?: Date | string
  Challenge: Prisma.ChallengeCreateNestedOneWithoutCompletedByInput
}

export type CompletedChallengeUncheckedCreateWithoutUserInput = {
  id?: number
  challengeId: number
  completedAt?: Date | string
}

export type CompletedChallengeCreateOrConnectWithoutUserInput = {
  where: Prisma.CompletedChallengeWhereUniqueInput
  create: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutUserInput, Prisma.CompletedChallengeUncheckedCreateWithoutUserInput>
}

export type CompletedChallengeCreateManyUserInputEnvelope = {
  data: Prisma.CompletedChallengeCreateManyUserInput | Prisma.CompletedChallengeCreateManyUserInput[]
}

export type CompletedChallengeUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CompletedChallengeWhereUniqueInput
  update: Prisma.XOR<Prisma.CompletedChallengeUpdateWithoutUserInput, Prisma.CompletedChallengeUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutUserInput, Prisma.CompletedChallengeUncheckedCreateWithoutUserInput>
}

export type CompletedChallengeUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CompletedChallengeWhereUniqueInput
  data: Prisma.XOR<Prisma.CompletedChallengeUpdateWithoutUserInput, Prisma.CompletedChallengeUncheckedUpdateWithoutUserInput>
}

export type CompletedChallengeUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CompletedChallengeScalarWhereInput
  data: Prisma.XOR<Prisma.CompletedChallengeUpdateManyMutationInput, Prisma.CompletedChallengeUncheckedUpdateManyWithoutUserInput>
}

export type CompletedChallengeScalarWhereInput = {
  AND?: Prisma.CompletedChallengeScalarWhereInput | Prisma.CompletedChallengeScalarWhereInput[]
  OR?: Prisma.CompletedChallengeScalarWhereInput[]
  NOT?: Prisma.CompletedChallengeScalarWhereInput | Prisma.CompletedChallengeScalarWhereInput[]
  id?: Prisma.IntFilter<"CompletedChallenge"> | number
  userId?: Prisma.IntFilter<"CompletedChallenge"> | number
  challengeId?: Prisma.IntFilter<"CompletedChallenge"> | number
  completedAt?: Prisma.DateTimeFilter<"CompletedChallenge"> | Date | string
}

export type CompletedChallengeCreateWithoutChallengeInput = {
  completedAt?: Date | string
  User: Prisma.UserCreateNestedOneWithoutCompletedChallengesInput
}

export type CompletedChallengeUncheckedCreateWithoutChallengeInput = {
  id?: number
  userId: number
  completedAt?: Date | string
}

export type CompletedChallengeCreateOrConnectWithoutChallengeInput = {
  where: Prisma.CompletedChallengeWhereUniqueInput
  create: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutChallengeInput, Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput>
}

export type CompletedChallengeCreateManyChallengeInputEnvelope = {
  data: Prisma.CompletedChallengeCreateManyChallengeInput | Prisma.CompletedChallengeCreateManyChallengeInput[]
}

export type CompletedChallengeUpsertWithWhereUniqueWithoutChallengeInput = {
  where: Prisma.CompletedChallengeWhereUniqueInput
  update: Prisma.XOR<Prisma.CompletedChallengeUpdateWithoutChallengeInput, Prisma.CompletedChallengeUncheckedUpdateWithoutChallengeInput>
  create: Prisma.XOR<Prisma.CompletedChallengeCreateWithoutChallengeInput, Prisma.CompletedChallengeUncheckedCreateWithoutChallengeInput>
}

export type CompletedChallengeUpdateWithWhereUniqueWithoutChallengeInput = {
  where: Prisma.CompletedChallengeWhereUniqueInput
  data: Prisma.XOR<Prisma.CompletedChallengeUpdateWithoutChallengeInput, Prisma.CompletedChallengeUncheckedUpdateWithoutChallengeInput>
}

export type CompletedChallengeUpdateManyWithWhereWithoutChallengeInput = {
  where: Prisma.CompletedChallengeScalarWhereInput
  data: Prisma.XOR<Prisma.CompletedChallengeUpdateManyMutationInput, Prisma.CompletedChallengeUncheckedUpdateManyWithoutChallengeInput>
}

export type CompletedChallengeCreateManyUserInput = {
  id?: number
  challengeId: number
  completedAt?: Date | string
}

export type CompletedChallengeUpdateWithoutUserInput = {
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Challenge?: Prisma.ChallengeUpdateOneRequiredWithoutCompletedByNestedInput
}

export type CompletedChallengeUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  challengeId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompletedChallengeUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  challengeId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompletedChallengeCreateManyChallengeInput = {
  id?: number
  userId: number
  completedAt?: Date | string
}

export type CompletedChallengeUpdateWithoutChallengeInput = {
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUpdateOneRequiredWithoutCompletedChallengesNestedInput
}

export type CompletedChallengeUncheckedUpdateWithoutChallengeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompletedChallengeUncheckedUpdateManyWithoutChallengeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CompletedChallengeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  challengeId?: boolean
  completedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["completedChallenge"]>

export type CompletedChallengeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  challengeId?: boolean
  completedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["completedChallenge"]>

export type CompletedChallengeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  challengeId?: boolean
  completedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["completedChallenge"]>

export type CompletedChallengeSelectScalar = {
  id?: boolean
  userId?: boolean
  challengeId?: boolean
  completedAt?: boolean
}

export type CompletedChallengeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "challengeId" | "completedAt", ExtArgs["result"]["completedChallenge"]>
export type CompletedChallengeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
}
export type CompletedChallengeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
}
export type CompletedChallengeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Challenge?: boolean | Prisma.ChallengeDefaultArgs<ExtArgs>
}

export type $CompletedChallengePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CompletedChallenge"
  objects: {
    User: Prisma.$UserPayload<ExtArgs>
    Challenge: Prisma.$ChallengePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: number
    challengeId: number
    completedAt: Date
  }, ExtArgs["result"]["completedChallenge"]>
  composites: {}
}

export type CompletedChallengeGetPayload<S extends boolean | null | undefined | CompletedChallengeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload, S>

export type CompletedChallengeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CompletedChallengeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CompletedChallengeCountAggregateInputType | true
  }

export interface CompletedChallengeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompletedChallenge'], meta: { name: 'CompletedChallenge' } }
  /**
   * Find zero or one CompletedChallenge that matches the filter.
   * @param {CompletedChallengeFindUniqueArgs} args - Arguments to find a CompletedChallenge
   * @example
   * // Get one CompletedChallenge
   * const completedChallenge = await prisma.completedChallenge.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CompletedChallengeFindUniqueArgs>(args: Prisma.SelectSubset<T, CompletedChallengeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CompletedChallengeClient<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CompletedChallenge that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CompletedChallengeFindUniqueOrThrowArgs} args - Arguments to find a CompletedChallenge
   * @example
   * // Get one CompletedChallenge
   * const completedChallenge = await prisma.completedChallenge.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CompletedChallengeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CompletedChallengeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompletedChallengeClient<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CompletedChallenge that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompletedChallengeFindFirstArgs} args - Arguments to find a CompletedChallenge
   * @example
   * // Get one CompletedChallenge
   * const completedChallenge = await prisma.completedChallenge.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CompletedChallengeFindFirstArgs>(args?: Prisma.SelectSubset<T, CompletedChallengeFindFirstArgs<ExtArgs>>): Prisma.Prisma__CompletedChallengeClient<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CompletedChallenge that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompletedChallengeFindFirstOrThrowArgs} args - Arguments to find a CompletedChallenge
   * @example
   * // Get one CompletedChallenge
   * const completedChallenge = await prisma.completedChallenge.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CompletedChallengeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CompletedChallengeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompletedChallengeClient<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CompletedChallenges that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompletedChallengeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CompletedChallenges
   * const completedChallenges = await prisma.completedChallenge.findMany()
   * 
   * // Get first 10 CompletedChallenges
   * const completedChallenges = await prisma.completedChallenge.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const completedChallengeWithIdOnly = await prisma.completedChallenge.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CompletedChallengeFindManyArgs>(args?: Prisma.SelectSubset<T, CompletedChallengeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CompletedChallenge.
   * @param {CompletedChallengeCreateArgs} args - Arguments to create a CompletedChallenge.
   * @example
   * // Create one CompletedChallenge
   * const CompletedChallenge = await prisma.completedChallenge.create({
   *   data: {
   *     // ... data to create a CompletedChallenge
   *   }
   * })
   * 
   */
  create<T extends CompletedChallengeCreateArgs>(args: Prisma.SelectSubset<T, CompletedChallengeCreateArgs<ExtArgs>>): Prisma.Prisma__CompletedChallengeClient<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CompletedChallenges.
   * @param {CompletedChallengeCreateManyArgs} args - Arguments to create many CompletedChallenges.
   * @example
   * // Create many CompletedChallenges
   * const completedChallenge = await prisma.completedChallenge.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CompletedChallengeCreateManyArgs>(args?: Prisma.SelectSubset<T, CompletedChallengeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CompletedChallenges and returns the data saved in the database.
   * @param {CompletedChallengeCreateManyAndReturnArgs} args - Arguments to create many CompletedChallenges.
   * @example
   * // Create many CompletedChallenges
   * const completedChallenge = await prisma.completedChallenge.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CompletedChallenges and only return the `id`
   * const completedChallengeWithIdOnly = await prisma.completedChallenge.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CompletedChallengeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CompletedChallengeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CompletedChallenge.
   * @param {CompletedChallengeDeleteArgs} args - Arguments to delete one CompletedChallenge.
   * @example
   * // Delete one CompletedChallenge
   * const CompletedChallenge = await prisma.completedChallenge.delete({
   *   where: {
   *     // ... filter to delete one CompletedChallenge
   *   }
   * })
   * 
   */
  delete<T extends CompletedChallengeDeleteArgs>(args: Prisma.SelectSubset<T, CompletedChallengeDeleteArgs<ExtArgs>>): Prisma.Prisma__CompletedChallengeClient<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CompletedChallenge.
   * @param {CompletedChallengeUpdateArgs} args - Arguments to update one CompletedChallenge.
   * @example
   * // Update one CompletedChallenge
   * const completedChallenge = await prisma.completedChallenge.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CompletedChallengeUpdateArgs>(args: Prisma.SelectSubset<T, CompletedChallengeUpdateArgs<ExtArgs>>): Prisma.Prisma__CompletedChallengeClient<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CompletedChallenges.
   * @param {CompletedChallengeDeleteManyArgs} args - Arguments to filter CompletedChallenges to delete.
   * @example
   * // Delete a few CompletedChallenges
   * const { count } = await prisma.completedChallenge.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CompletedChallengeDeleteManyArgs>(args?: Prisma.SelectSubset<T, CompletedChallengeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CompletedChallenges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompletedChallengeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CompletedChallenges
   * const completedChallenge = await prisma.completedChallenge.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CompletedChallengeUpdateManyArgs>(args: Prisma.SelectSubset<T, CompletedChallengeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CompletedChallenges and returns the data updated in the database.
   * @param {CompletedChallengeUpdateManyAndReturnArgs} args - Arguments to update many CompletedChallenges.
   * @example
   * // Update many CompletedChallenges
   * const completedChallenge = await prisma.completedChallenge.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CompletedChallenges and only return the `id`
   * const completedChallengeWithIdOnly = await prisma.completedChallenge.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CompletedChallengeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CompletedChallengeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CompletedChallenge.
   * @param {CompletedChallengeUpsertArgs} args - Arguments to update or create a CompletedChallenge.
   * @example
   * // Update or create a CompletedChallenge
   * const completedChallenge = await prisma.completedChallenge.upsert({
   *   create: {
   *     // ... data to create a CompletedChallenge
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CompletedChallenge we want to update
   *   }
   * })
   */
  upsert<T extends CompletedChallengeUpsertArgs>(args: Prisma.SelectSubset<T, CompletedChallengeUpsertArgs<ExtArgs>>): Prisma.Prisma__CompletedChallengeClient<runtime.Types.Result.GetResult<Prisma.$CompletedChallengePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CompletedChallenges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompletedChallengeCountArgs} args - Arguments to filter CompletedChallenges to count.
   * @example
   * // Count the number of CompletedChallenges
   * const count = await prisma.completedChallenge.count({
   *   where: {
   *     // ... the filter for the CompletedChallenges we want to count
   *   }
   * })
  **/
  count<T extends CompletedChallengeCountArgs>(
    args?: Prisma.Subset<T, CompletedChallengeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CompletedChallengeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CompletedChallenge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompletedChallengeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CompletedChallengeAggregateArgs>(args: Prisma.Subset<T, CompletedChallengeAggregateArgs>): Prisma.PrismaPromise<GetCompletedChallengeAggregateType<T>>

  /**
   * Group by CompletedChallenge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompletedChallengeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CompletedChallengeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CompletedChallengeGroupByArgs['orderBy'] }
      : { orderBy?: CompletedChallengeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CompletedChallengeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompletedChallengeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CompletedChallenge model
 */
readonly fields: CompletedChallengeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CompletedChallenge.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CompletedChallengeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Challenge<T extends Prisma.ChallengeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChallengeDefaultArgs<ExtArgs>>): Prisma.Prisma__ChallengeClient<runtime.Types.Result.GetResult<Prisma.$ChallengePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CompletedChallenge model
 */
export interface CompletedChallengeFieldRefs {
  readonly id: Prisma.FieldRef<"CompletedChallenge", 'Int'>
  readonly userId: Prisma.FieldRef<"CompletedChallenge", 'Int'>
  readonly challengeId: Prisma.FieldRef<"CompletedChallenge", 'Int'>
  readonly completedAt: Prisma.FieldRef<"CompletedChallenge", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CompletedChallenge findUnique
 */
export type CompletedChallengeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  /**
   * Filter, which CompletedChallenge to fetch.
   */
  where: Prisma.CompletedChallengeWhereUniqueInput
}

/**
 * CompletedChallenge findUniqueOrThrow
 */
export type CompletedChallengeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  /**
   * Filter, which CompletedChallenge to fetch.
   */
  where: Prisma.CompletedChallengeWhereUniqueInput
}

/**
 * CompletedChallenge findFirst
 */
export type CompletedChallengeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  /**
   * Filter, which CompletedChallenge to fetch.
   */
  where?: Prisma.CompletedChallengeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompletedChallenges to fetch.
   */
  orderBy?: Prisma.CompletedChallengeOrderByWithRelationInput | Prisma.CompletedChallengeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CompletedChallenges.
   */
  cursor?: Prisma.CompletedChallengeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompletedChallenges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompletedChallenges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CompletedChallenges.
   */
  distinct?: Prisma.CompletedChallengeScalarFieldEnum | Prisma.CompletedChallengeScalarFieldEnum[]
}

/**
 * CompletedChallenge findFirstOrThrow
 */
export type CompletedChallengeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  /**
   * Filter, which CompletedChallenge to fetch.
   */
  where?: Prisma.CompletedChallengeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompletedChallenges to fetch.
   */
  orderBy?: Prisma.CompletedChallengeOrderByWithRelationInput | Prisma.CompletedChallengeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CompletedChallenges.
   */
  cursor?: Prisma.CompletedChallengeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompletedChallenges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompletedChallenges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CompletedChallenges.
   */
  distinct?: Prisma.CompletedChallengeScalarFieldEnum | Prisma.CompletedChallengeScalarFieldEnum[]
}

/**
 * CompletedChallenge findMany
 */
export type CompletedChallengeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  /**
   * Filter, which CompletedChallenges to fetch.
   */
  where?: Prisma.CompletedChallengeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompletedChallenges to fetch.
   */
  orderBy?: Prisma.CompletedChallengeOrderByWithRelationInput | Prisma.CompletedChallengeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CompletedChallenges.
   */
  cursor?: Prisma.CompletedChallengeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompletedChallenges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompletedChallenges.
   */
  skip?: number
  distinct?: Prisma.CompletedChallengeScalarFieldEnum | Prisma.CompletedChallengeScalarFieldEnum[]
}

/**
 * CompletedChallenge create
 */
export type CompletedChallengeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  /**
   * The data needed to create a CompletedChallenge.
   */
  data: Prisma.XOR<Prisma.CompletedChallengeCreateInput, Prisma.CompletedChallengeUncheckedCreateInput>
}

/**
 * CompletedChallenge createMany
 */
export type CompletedChallengeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CompletedChallenges.
   */
  data: Prisma.CompletedChallengeCreateManyInput | Prisma.CompletedChallengeCreateManyInput[]
}

/**
 * CompletedChallenge createManyAndReturn
 */
export type CompletedChallengeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * The data used to create many CompletedChallenges.
   */
  data: Prisma.CompletedChallengeCreateManyInput | Prisma.CompletedChallengeCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CompletedChallenge update
 */
export type CompletedChallengeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  /**
   * The data needed to update a CompletedChallenge.
   */
  data: Prisma.XOR<Prisma.CompletedChallengeUpdateInput, Prisma.CompletedChallengeUncheckedUpdateInput>
  /**
   * Choose, which CompletedChallenge to update.
   */
  where: Prisma.CompletedChallengeWhereUniqueInput
}

/**
 * CompletedChallenge updateMany
 */
export type CompletedChallengeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CompletedChallenges.
   */
  data: Prisma.XOR<Prisma.CompletedChallengeUpdateManyMutationInput, Prisma.CompletedChallengeUncheckedUpdateManyInput>
  /**
   * Filter which CompletedChallenges to update
   */
  where?: Prisma.CompletedChallengeWhereInput
  /**
   * Limit how many CompletedChallenges to update.
   */
  limit?: number
}

/**
 * CompletedChallenge updateManyAndReturn
 */
export type CompletedChallengeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * The data used to update CompletedChallenges.
   */
  data: Prisma.XOR<Prisma.CompletedChallengeUpdateManyMutationInput, Prisma.CompletedChallengeUncheckedUpdateManyInput>
  /**
   * Filter which CompletedChallenges to update
   */
  where?: Prisma.CompletedChallengeWhereInput
  /**
   * Limit how many CompletedChallenges to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CompletedChallenge upsert
 */
export type CompletedChallengeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  /**
   * The filter to search for the CompletedChallenge to update in case it exists.
   */
  where: Prisma.CompletedChallengeWhereUniqueInput
  /**
   * In case the CompletedChallenge found by the `where` argument doesn't exist, create a new CompletedChallenge with this data.
   */
  create: Prisma.XOR<Prisma.CompletedChallengeCreateInput, Prisma.CompletedChallengeUncheckedCreateInput>
  /**
   * In case the CompletedChallenge was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CompletedChallengeUpdateInput, Prisma.CompletedChallengeUncheckedUpdateInput>
}

/**
 * CompletedChallenge delete
 */
export type CompletedChallengeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
  /**
   * Filter which CompletedChallenge to delete.
   */
  where: Prisma.CompletedChallengeWhereUniqueInput
}

/**
 * CompletedChallenge deleteMany
 */
export type CompletedChallengeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CompletedChallenges to delete
   */
  where?: Prisma.CompletedChallengeWhereInput
  /**
   * Limit how many CompletedChallenges to delete.
   */
  limit?: number
}

/**
 * CompletedChallenge without action
 */
export type CompletedChallengeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompletedChallenge
   */
  select?: Prisma.CompletedChallengeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompletedChallenge
   */
  omit?: Prisma.CompletedChallengeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompletedChallengeInclude<ExtArgs> | null
}
